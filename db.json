{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":false},{"_id":"themes/hexo-theme-daisy/source/css/style.styl","path":"css/style.styl","modified":false}],"Cache":[{"_id":"scaffolds/books.md","mtime":1415105931000},{"_id":"scaffolds/draft.md","mtime":1415105931000},{"_id":"scaffolds/page.md","mtime":1415105931000},{"_id":"scaffolds/photo.md","mtime":1415105931000},{"_id":"scaffolds/post.md","mtime":1415105931000},{"_id":"source/CNAME","mtime":1415105931000},{"_id":"source/_posts/Express入门.md","mtime":1415105931000},{"_id":"source/_posts/Fis-快速入门.md","mtime":1415105931000},{"_id":"source/_posts/Flex-box-应对复杂布局.md","mtime":1415105931000},{"_id":"source/_posts/Grunt遇到的问题.md","mtime":1415105931000},{"_id":"source/_posts/HTML历史管理-彩票生成器.md","mtime":1415105931000},{"_id":"source/_posts/Hexo-升级报错.md","mtime":1415105931000},{"_id":"source/_posts/JavaScript技巧揭秘.md","mtime":1415105931000},{"_id":"source/_posts/Javascript算法-排序.md","mtime":1415105931000},{"_id":"source/_posts/Karma和Jasmine.md","mtime":1415105931000},{"_id":"source/_posts/Pub-Sub模式.md","mtime":1415105931000},{"_id":"source/_posts/Sublime-Text2-个人常用插件.md","mtime":1415421846000},{"_id":"source/_posts/Web-Components最佳实践.md","mtime":1415105931000},{"_id":"source/_posts/WebComponents.md","mtime":1415105931000},{"_id":"source/_posts/WebMobile图标定义属性.md","mtime":1415105931000},{"_id":"source/_posts/chrome查看密码.md","mtime":1415105931000},{"_id":"source/_posts/defer-和-async-的区别.md","mtime":1415105931000},{"_id":"source/_posts/weinre远程调试web-mobile.md","mtime":1415105931000},{"_id":"source/_posts/window-查看端口占用.md","mtime":1415105931000},{"_id":"source/_posts/为什么要写博客？.md","mtime":1415105931000},{"_id":"source/_posts/你不知道的“是非”.md","mtime":1415105931000},{"_id":"source/_posts/使用Express4和Node搭建RESTful-API.md","mtime":1415431663000},{"_id":"source/_posts/关于Git无法提交-indexlock的解决办法.md","mtime":1415105931000},{"_id":"source/_posts/占位符.md","mtime":1415105931000},{"_id":"source/_posts/回滚.md","mtime":1415105931000},{"_id":"source/_posts/复制DOS里面的内容.md","mtime":1415105931000},{"_id":"source/_posts/客户端字体问题.md","mtime":1415105931000},{"_id":"source/_posts/浏览器的工作原理：新式网络浏览器幕后揭秘.md","mtime":1415316379000},{"_id":"source/_posts/移动端友好.md","mtime":1415105931000},{"_id":"source/_posts/移动端网页开发.md","mtime":1415105931000},{"_id":"source/about/index.md","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/_config.yml","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/languages/default.yml","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/languages/de.yml","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/languages/es.yml","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/languages/ru.yml","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/languages/zh-CN.yml","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/languages/zh-TW.yml","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/archive.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/category.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/index.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/layout.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/page.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/post.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/tag.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_widget/category.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_widget/recent_posts.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_widget/search.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_widget/tag.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_widget/tagcloud.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/after_footer.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/archive.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/article.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/comment.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/footer.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/google_analytics.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/head.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/header.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/pagination.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/sidebar.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/post/category.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/post/gallery.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/post/share.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/post/tag.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/layout/_partial/post/title.ejs","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/source/css/style.styl","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/source/css/_base/layout.styl","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/source/css/_base/utils.styl","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/source/css/_base/variable.styl","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/source/css/_partial/archive.styl","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/source/css/_partial/article.styl","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/source/css/_partial/comment.styl","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/source/css/_partial/footer.styl","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/source/css/_partial/header.styl","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/source/css/_partial/index.styl","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/source/css/_partial/sidebar.styl","mtime":1415105931000},{"_id":"themes/hexo-theme-daisy/source/css/_partial/syntax.styl","mtime":1415105931000}],"Category":[],"Page":[{"title":"关于我","date":1403577882000,"content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">I</span> am a <span class=\"keyword\">Front</span> <span class=\"keyword\">End</span> Engineer！</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Talk is cheap, show me the code。—Linus</p>\n</blockquote>\n","source":"about/index.md","raw":"title: 关于我\r\ndate: 2014-06-24 10:44:42\r\n---\r\n\r\n```\r\nI am a Front End Engineer！\r\n```\r\n\r\n>Talk is cheap, show me the code。--Linus","updated":1415105931000,"path":"about/index.html","excerpt":"","_id":"ey7v43d9zz8esi84","comments":true,"layout":"page"}],"Post":[{"title":"Flex box 应对复杂布局","date":1405866752000,"tags":[],"content":"<h3 id=\"什么是Flex_box?\">什么是Flex box?</h3>\n<blockquote>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. </p>\n</blockquote>\n<p>大体意思：</p>\n<blockquote>\n<p>css3的flexbox是一个网页布局模式，例如，当网页布局适配不同屏幕尺寸和不同设备的显示器时，元素表现的可预测。</p>\n</blockquote>\n<p>通俗点说：flexbox布局模式可以调整子元素的宽、高，使元素最大限度的使用屏幕大小。一个伸缩容器，会扩展子元素来适应屏幕或者收缩子元素防止溢出。</p>\n<h3 id=\"如何定义Flex_box?\">如何定义Flex box?</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">display</span><span class=\"pseudo\">:flex</span></div></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">display:<span class=\"keyword\">inline</span>-flex</div></pre></td></tr></table></figure>\n\n<p><a id=\"more\"></a><br>注：<br><strong>2009年7月 工作草案 (display: box;)<br>2011年3月 工作草案 (display: flexbox;)<br>2011年11月 工作草案 (display: flexbox;)<br>2012年3月 工作草案 (display: flexbox;)<br>2012年6月 工作草案 (display: flex;)<br>2012年9月 候选推荐 (display: flex;)</strong></p>\n<p><strong>目前来说(2013-12-11日)，手机端上的浏览器（uc,iphone自带浏览器等）还不支持候选推荐的方法，它仍然支持的方案是第一个(display:box;)，所以如果是手机h5页面，要使用这个版本的的语法。</strong></p>\n<p>别以为移动端web开发不要处理兼容性，其实都是坑，都是浪费时间：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">.flex-container</span> <span class=\"rules\">{ </span></div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\"> -moz-box</span></span>; <span class=\"comment\">/* Firefox */</span> </div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\"> -ms-flexbox</span></span>; <span class=\"comment\">/* IE10 */</span> </div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\"> -webkit-box</span></span>; <span class=\"comment\">/* Safari */</span> </div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\"> -webkit-flex</span></span>; <span class=\"comment\">/* Chrome, WebKit */</span> </div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\"> box</span></span>; </div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\"> flexbox</span></span>; </div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\"> flex</span></span>; </div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">100%</span></span></span>; </div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">100%</span></span></span>; </div><div class=\"line\">\t<span class=\"rule\"><span class=\"attribute\">background-color</span>:<span class=\"value\"> gray</span></span>; </div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>参考文章：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a> </li>\n<li><a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\" target=\"_blank\" rel=\"external\">http://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></li>\n<li><a href=\"http://learnlayout.com/flexbox.html\" target=\"_blank\" rel=\"external\">http://learnlayout.com/flexbox.html</a></li>\n<li><a href=\"http://www.smashingmagazine.com/2011/09/19/css3-flexible-box-layout-explained/\" target=\"_blank\" rel=\"external\">http://www.smashingmagazine.com/2011/09/19/css3-flexible-box-layout-explained/</a></li>\n<li><a href=\"http://www.smashingmagazine.com/2013/05/22/centering-elements-with-flexbox/\" target=\"_blank\" rel=\"external\">http://www.smashingmagazine.com/2013/05/22/centering-elements-with-flexbox/</a></li>\n</ul>\n","source":"_posts/Flex-box-应对复杂布局.md","raw":"title: 'Flex box 应对复杂布局'\ndate: 2014-07-20 22:32:32\ntags:\n---\n###什么是Flex box?###\n\n>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. \n\n大体意思：\n\n>css3的flexbox是一个网页布局模式，例如，当网页布局适配不同屏幕尺寸和不同设备的显示器时，元素表现的可预测。\n\n通俗点说：flexbox布局模式可以调整子元素的宽、高，使元素最大限度的使用屏幕大小。一个伸缩容器，会扩展子元素来适应屏幕或者收缩子元素防止溢出。\n\n###如何定义Flex box?###\n\n```\ndisplay:flex\n```\nor\n```\ndisplay:inline-flex\n```\n<!--more-->\n注：\n__2009年7月 工作草案 (display: box;)\n2011年3月 工作草案 (display: flexbox;)\n2011年11月 工作草案 (display: flexbox;)\n2012年3月 工作草案 (display: flexbox;)\n2012年6月 工作草案 (display: flex;)\n2012年9月 候选推荐 (display: flex;)__\n\n__目前来说(2013-12-11日)，手机端上的浏览器（uc,iphone自带浏览器等）还不支持候选推荐的方法，它仍然支持的方案是第一个(display:box;)，所以如果是手机h5页面，要使用这个版本的的语法。__\n\n别以为移动端web开发不要处理兼容性，其实都是坑，都是浪费时间：\n```\n.flex-container { \n\tdisplay: -moz-box; /* Firefox */ \n\tdisplay: -ms-flexbox; /* IE10 */ \n\tdisplay: -webkit-box; /* Safari */ \n\tdisplay: -webkit-flex; /* Chrome, WebKit */ \n\tdisplay: box; \n\tdisplay: flexbox; \n\tdisplay: flex; \n\twidth: 100%; \n\theight: 100%; \n\tbackground-color: gray; \n} \n```\n\n参考文章：\n\n*\thttps://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes \n*\thttp://css-tricks.com/snippets/css/a-guide-to-flexbox/\n*\thttp://learnlayout.com/flexbox.html\n*\thttp://www.smashingmagazine.com/2011/09/19/css3-flexible-box-layout-explained/\n*\thttp://www.smashingmagazine.com/2013/05/22/centering-elements-with-flexbox/\n","slug":"Flex-box-应对复杂布局","updated":1415105931000,"excerpt":"<h3 id=\"什么是Flex_box?\">什么是Flex box?</h3>\n<blockquote>\n<p>The CSS3 Flexible Box, or flexbox, is a layout mode providing for the arrangement of elements on a page such that the elements behave predictably when the page layout must accommodate different screen sizes and different display devices. </p>\n</blockquote>\n<p>大体意思：</p>\n<blockquote>\n<p>css3的flexbox是一个网页布局模式，例如，当网页布局适配不同屏幕尺寸和不同设备的显示器时，元素表现的可预测。</p>\n</blockquote>\n<p>通俗点说：flexbox布局模式可以调整子元素的宽、高，使元素最大限度的使用屏幕大小。一个伸缩容器，会扩展子元素来适应屏幕或者收缩子元素防止溢出。</p>\n<h3 id=\"如何定义Flex_box?\">如何定义Flex box?</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">display</span><span class=\"pseudo\">:flex</span></div></pre></td></tr></table></figure>\n\n<p>or</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">display:<span class=\"keyword\">inline</span>-flex</div></pre></td></tr></table></figure>\n\n<p>","_id":"3cqsomzznvf0ju54","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Grunt遇到的问题","date":1407228663000,"tags":["n3dgngc096ik4vas"],"content":"<p>在用YEOMAN构建应用时，遇到一个问题：</p>\n<blockquote>\n<p>D:\\nodeJS\\node_modules\\grunt-html&gt;grunt<br>    grunt-cli: The grunt command line interface. (v0.1.6)<br>    Fatal error: Unable to find local grunt.<br>    If you’re seeing this message, either a Gruntfile wasn’t found or grunt<br>    hasn’t been installed locally to your project. For more information about<br>    installing and configuring grunt, please see the Getting Started guide:<br>    <a href=\"http://gruntjs.com/getting-started\" target=\"_blank\" rel=\"external\">http://gruntjs.com/getting-started</a></p>\n</blockquote>\n<p>一般我们使用Grunt之前安装：</p>\n<pre><code>npm install -g grunt-<span class=\"keyword\">cli</span>\n</code></pre><p>然后在项目中使用：</p>\n<pre><code><span class=\"title\">grunt</span> serve\n</code></pre><p>这时就会报错。</p>\n<p>经过查资料，看文档，找到解决方法。</p>\n<p>官网资料：</p>\n<blockquote>\n<p>Note that installing grunt-cli does not install the Grunt task runner! The job of the Grunt CLI is simple: run the version of Grunt which has been installed next to a Gruntfile. This allows multiple versions of Grunt to be installed on the same machine simultaneously.</p>\n</blockquote>\n<p>翻译：</p>\n<blockquote>\n<p>注意，安装grunt-cli并不等于安装了grunt任务运行器！Grunt CLI的工作很简单：在Gruntfile所在目录调用运行已经安装好的相应版本的Grunt。这就意味着可以在同一台机器上同时安装多个版本的Grunt。</p>\n</blockquote>\n<p>在项目根目录运行：</p>\n<pre><code>npm <span class=\"operator\"><span class=\"keyword\">install</span> grunt <span class=\"comment\">--save-dev</span></span>\n</code></pre><p><strong>save-dev</strong>会自动将<strong>grunt</strong>添加到<strong>package.json</strong>的<strong>dev-dependency</strong>中，不需要手动添加。</p>\n<p>参考：</p>\n<p><a href=\"http://stackoverflow.com/questions/15483735/fatal-error-unable-to-find-local-grunt-when-running-grunt-command\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/15483735/fatal-error-unable-to-find-local-grunt-when-running-grunt-command</a></p>\n","source":"_posts/Grunt遇到的问题.md","raw":"title: Grunt遇到的问题\ndate: 2014-08-05 16:51:03\ntags: Grunt\n---\n在用YEOMAN构建应用时，遇到一个问题：\n\n>D:\\nodeJS\\node_modules\\grunt-html>grunt\n\tgrunt-cli: The grunt command line interface. (v0.1.6)\n\tFatal error: Unable to find local grunt.\n\tIf you're seeing this message, either a Gruntfile wasn't found or grunt\n\thasn't been installed locally to your project. For more information about\n\tinstalling and configuring grunt, please see the Getting Started guide:\n\thttp://gruntjs.com/getting-started\n\n一般我们使用Grunt之前安装：\n\n\tnpm install -g grunt-cli\n\n然后在项目中使用：\n\n\tgrunt serve\n\n这时就会报错。\n\n经过查资料，看文档，找到解决方法。\n\n官网资料：\n\n>Note that installing grunt-cli does not install the Grunt task runner! The job of the Grunt CLI is simple: run the version of Grunt which has been installed next to a Gruntfile. This allows multiple versions of Grunt to be installed on the same machine simultaneously.\n\n翻译：\n\n>注意，安装grunt-cli并不等于安装了grunt任务运行器！Grunt CLI的工作很简单：在Gruntfile所在目录调用运行已经安装好的相应版本的Grunt。这就意味着可以在同一台机器上同时安装多个版本的Grunt。\n\n在项目根目录运行：\n\n\tnpm install grunt --save-dev\n\n__save-dev__会自动将__grunt__添加到__package.json__的__dev-dependency__中，不需要手动添加。\n\n参考：\n\nhttp://stackoverflow.com/questions/15483735/fatal-error-unable-to-find-local-grunt-when-running-grunt-command","slug":"Grunt遇到的问题","updated":1415105931000,"excerpt":"","_id":"c98c6ed9nhk24oah","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"HTML历史管理-彩票生成器","date":1410849509000,"tags":[],"content":"<p>一般的彩票网站都有<strong>机选</strong>（随机选择）功能：</p>\n<blockquote>\n<p><a href=\"http://caipiao.163.com/order/dlt/#from=syks\" target=\"_blank\" rel=\"external\">网易彩票</a></p>\n<p><a href=\"http://caipiao.hao123.com/\" target=\"_blank\" rel=\"external\">好123彩票</a></p>\n</blockquote>\n<p>下面就用javascript简单模拟一下</p>\n<h3 id=\"HTML\">HTML</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"caipiao\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">button</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"J_btn\"</span>&gt;</span>彩票生成<span class=\"tag\">&lt;/<span class=\"title\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"Javascript\">Javascript</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> btn = document.getElementById(<span class=\"symbol\">'J_bt</span>n'),</div><div class=\"line\">    caipiao = document.getElementById(<span class=\"symbol\">'J_caipia</span>o');</div><div class=\"line\">btn.addEventListener(<span class=\"symbol\">'clic</span>k',function(){</div><div class=\"line\">    <span class=\"keyword\">var</span> nums = randomNum(<span class=\"number\">35</span>,<span class=\"number\">7</span>);</div><div class=\"line\">    caipiao.innerHTML = nums;</div><div class=\"line\">});</div><div class=\"line\"></div><div class=\"line\"><span class=\"javadoc\">/**</span></div><div class=\"line\"> * 从指定数组中随机抽取指定个数的数字</div><div class=\"line\"> * <span class=\"javadoctag\">@param</span>  {[Number]} alls     [总个数]</div><div class=\"line\"> * <span class=\"javadoctag\">@param</span>  {[Number]} selected [要选择的个数]</div><div class=\"line\"> * <span class=\"javadoctag\">@return</span> {[Array]}          [返回的指定个数的数组]</div><div class=\"line\"> */</div><div class=\"line\">function randomNum(alls,selected){</div><div class=\"line\">    <span class=\"keyword\">var</span> numArr = [],</div><div class=\"line\">        resultArr = [],</div><div class=\"line\">        index;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= alls; i++){</div><div class=\"line\">        numArr.unshift(i);</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; selected; j++){</div><div class=\"line\">        index = Math.floor( Math.random() * alls );</div><div class=\"line\">        resultArr.push(numArr[index]);</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> resultArr;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/binom/2/embed\" target=\"_blank\" rel=\"external\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>\n<p>但是有时候我感觉前一组数字会更好，想返回，可是上面的没有此功能。</p>\n<p>下面就来完成上面提到的需求：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'J_btn'</span>),</div><div class=\"line\">    caipiao = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'J_caipiao'</span>);</div><div class=\"line\">    btn.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">        <span class=\"keyword\">var</span> numKey = <span class=\"built_in\">Math</span>.random();</div><div class=\"line\">        <span class=\"keyword\">var</span> nums = randomNum(<span class=\"number\">35</span>,<span class=\"number\">7</span>);</div><div class=\"line\">        caipiao.innerHTML = nums;</div><div class=\"line\">        <span class=\"built_in\">window</span>.location.hash = nums;</div><div class=\"line\">    });</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 从指定数组中随机抽取指定个数的数字</div><div class=\"line\">     * @param  {[Number]} alls     [总个数]</div><div class=\"line\">     * @param  {[Number]} selected [要选择的个数]</div><div class=\"line\">     * @return {[Array]}          [返回的指定个数的数组]</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randomNum</span><span class=\"params\">(alls,selected)</span></span>{</div><div class=\"line\">        <span class=\"keyword\">var</span> numArr = [],</div><div class=\"line\">            resultArr = [],</div><div class=\"line\">            index;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= alls; i++){</div><div class=\"line\">            numArr.unshift(i);</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; selected; j++){</div><div class=\"line\">            index = <span class=\"built_in\">Math</span>.floor( <span class=\"built_in\">Math</span>.random() * alls );</div><div class=\"line\">            resultArr.push(numArr[index]);</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">return</span> resultArr;</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"built_in\">window</span>.onhashchange = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">        <span class=\"keyword\">var</span> num = <span class=\"built_in\">window</span>.location.hash.substr(<span class=\"number\">1</span>) || <span class=\"string\">''</span>;</div><div class=\"line\">        caipiao.innerHTML = num;</div><div class=\"line\">    };</div></pre></td></tr></table></figure>\n\n<p>预览地址：<a href=\"http://jsbin.com/batocu/1/\" target=\"_blank\" rel=\"external\">demo1</a></p>\n<p>打开上面的连接，看地址栏的变化，会有一串数字。当生成几组之后，你可以通过浏览器的后退按钮选择前面生成的数。</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/batocu/1/embed\" target=\"_blank\" rel=\"external\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>\n<p>进一步优化：</p>\n<p><strong>此时URL中的数字就是生成的数字，所以让人感觉不专业</strong>，所以我们做下处理</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'J_btn'</span>),</div><div class=\"line\">    caipiao = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'J_caipiao'</span>),</div><div class=\"line\">    obj = {};</div><div class=\"line\"></div><div class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> nums = randomNum(<span class=\"number\">35</span>,<span class=\"number\">7</span>);</div><div class=\"line\">    caipiao.innerHTML = nums;</div><div class=\"line\">    <span class=\"keyword\">var</span> numKey = <span class=\"built_in\">Math</span>.random();</div><div class=\"line\">    obj[numKey] = nums;</div><div class=\"line\">    <span class=\"built_in\">window</span>.location.hash = numKey;</div><div class=\"line\">});</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 从指定数组中随机抽取指定个数的数字</div><div class=\"line\"> * @param  {[Number]} alls     [总个数]</div><div class=\"line\"> * @param  {[Number]} selected [要选择的个数]</div><div class=\"line\"> * @return {[Array]}          [返回的指定个数的数组]</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randomNum</span><span class=\"params\">(alls,selected)</span></span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> numArr = [],</div><div class=\"line\">        resultArr = [],</div><div class=\"line\">        index;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= alls; i++){</div><div class=\"line\">        numArr.unshift(i);</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; selected; j++){</div><div class=\"line\">        index = <span class=\"built_in\">Math</span>.floor( <span class=\"built_in\">Math</span>.random() * alls );</div><div class=\"line\">        resultArr.push(numArr[index]);</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> resultArr;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"built_in\">window</span>.onhashchange = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> num = obj[<span class=\"built_in\">window</span>.location.hash.substr(<span class=\"number\">1</span>)] || <span class=\"string\">''</span>;</div><div class=\"line\">    caipiao.innerHTML = num;</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>解析：</p>\n<p><strong>新增了一个对象 obj，存储生成的数字，关键字是 随机生成的数字numKey，从hash取的时候也是根据numKey。</strong></p>\n<p>预览：<a href=\"http://jsbin.com/bakep/1/#0.8101516056340188\" target=\"_blank\" rel=\"external\">demo2</a></p>\n<p>此时你会看到浏览器后面有一串小数，貌似很专业。</p>\n","source":"_posts/HTML历史管理-彩票生成器.md","raw":"title: HTML历史管理-彩票生成器\ndate: 2014-09-16 14:38:29\ntags:\n---\n一般的彩票网站都有__机选__（随机选择）功能：\n\n> [网易彩票](http://caipiao.163.com/order/dlt/#from=syks)\n\n> [好123彩票](http://caipiao.hao123.com/)\n\n下面就用javascript简单模拟一下\n\n###HTML###\n\n```\n<div id=\"caipiao\"></div>\n<button id=\"J_btn\">彩票生成</button>\n```\n\n###Javascript###\n\n\n```\nvar btn = document.getElementById('J_btn'),\n    caipiao = document.getElementById('J_caipiao');\nbtn.addEventListener('click',function(){\n    var nums = randomNum(35,7);\n    caipiao.innerHTML = nums;\n});\n\n/**\n * 从指定数组中随机抽取指定个数的数字\n * @param  {[Number]} alls     [总个数]\n * @param  {[Number]} selected [要选择的个数]\n * @return {[Array]}          [返回的指定个数的数组]\n */\nfunction randomNum(alls,selected){\n    var numArr = [],\n        resultArr = [],\n        index;\n    for(var i = 1; i <= alls; i++){\n        numArr.unshift(i);\n    }\n    for(var j = 0; j < selected; j++){\n        index = Math.floor( Math.random() * alls );\n        resultArr.push(numArr[index]);\n    }\n    return resultArr;\n}\n```\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/binom/2/embed\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script>\n\n但是有时候我感觉前一组数字会更好，想返回，可是上面的没有此功能。\n\n下面就来完成上面提到的需求：\n\n```\nvar btn = document.getElementById('J_btn'),\n    caipiao = document.getElementById('J_caipiao');\n    btn.addEventListener('click',function(){\n        var numKey = Math.random();\n        var nums = randomNum(35,7);\n        caipiao.innerHTML = nums;\n        window.location.hash = nums;\n    });\n    /**\n     * 从指定数组中随机抽取指定个数的数字\n     * @param  {[Number]} alls     [总个数]\n     * @param  {[Number]} selected [要选择的个数]\n     * @return {[Array]}          [返回的指定个数的数组]\n     */\n    function randomNum(alls,selected){\n        var numArr = [],\n            resultArr = [],\n            index;\n        for(var i = 1; i <= alls; i++){\n            numArr.unshift(i);\n        }\n        for(var j = 0; j < selected; j++){\n            index = Math.floor( Math.random() * alls );\n            resultArr.push(numArr[index]);\n        }\n        return resultArr;\n    }\n    window.onhashchange = function(){\n        var num = window.location.hash.substr(1) || '';\n        caipiao.innerHTML = num;\n    };\n```\n\n预览地址：[demo1](http://jsbin.com/batocu/1/)\n\n打开上面的连接，看地址栏的变化，会有一串数字。当生成几组之后，你可以通过浏览器的后退按钮选择前面生成的数。\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/batocu/1/embed\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script>\n\n进一步优化：\n\n__此时URL中的数字就是生成的数字，所以让人感觉不专业__，所以我们做下处理\n\n```\nvar btn = document.getElementById('J_btn'),\n    caipiao = document.getElementById('J_caipiao'),\n    obj = {};\n\nbtn.addEventListener('click',function(){\n    var nums = randomNum(35,7);\n    caipiao.innerHTML = nums;\n    var numKey = Math.random();\n    obj[numKey] = nums;\n    window.location.hash = numKey;\n});\n/**\n * 从指定数组中随机抽取指定个数的数字\n * @param  {[Number]} alls     [总个数]\n * @param  {[Number]} selected [要选择的个数]\n * @return {[Array]}          [返回的指定个数的数组]\n */\nfunction randomNum(alls,selected){\n    var numArr = [],\n        resultArr = [],\n        index;\n    for(var i = 1; i <= alls; i++){\n        numArr.unshift(i);\n    }\n    for(var j = 0; j < selected; j++){\n        index = Math.floor( Math.random() * alls );\n        resultArr.push(numArr[index]);\n    }\n    return resultArr;\n}\nwindow.onhashchange = function(){\n    var num = obj[window.location.hash.substr(1)] || '';\n    caipiao.innerHTML = num;\n};\n```\n\n解析：\n\n__新增了一个对象 obj，存储生成的数字，关键字是 随机生成的数字numKey，从hash取的时候也是根据numKey。__\n\n预览：[demo2](http://jsbin.com/bakep/1/#0.8101516056340188)\n\n此时你会看到浏览器后面有一串小数，貌似很专业。","slug":"HTML历史管理-彩票生成器","updated":1415105931000,"excerpt":"","_id":"z3tdf1hmsb6295z4","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Hexo 升级报错","date":1411661550000,"tags":["vofllu2j5disl62a"],"content":"<p>在mac上好不容易装了node(这几天node一直没有安装成功，原来是安装包错误！！！)，等到安装hexo之后，运行：</p>\n<pre><code>hexo <span class=\"keyword\">server</span>\n</code></pre><p>然后就报错：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"special\">{</span> name: 'HexoError',</div><div class=\"line\">  reason: 'incomplete explicit mapping pair; a key node is missed',</div><div class=\"line\">  mark: </div><div class=\"line\">   <span class=\"special\">{</span> name: null,</div><div class=\"line\">     buffer: 'categories: Kategorien<span class=\"command\">\\r</span><span class=\"command\">\\nsearch</span>: Suche<span class=\"command\">\\r</span><span class=\"command\">\\ntags</span>: Tags<span class=\"command\">\\r</span><span class=\"command\">\\ntagcloud</span>: Tag-Cloud<span class=\"command\">\\r</span><span class=\"command\">\\ntweets</span>: Tweets<span class=\"command\">\\r</span><span class=\"command\">\\nprev</span>: Vorherige Seite<span class=\"command\">\\r</span><span class=\"command\">\\nnext</span>: Nächste Seite<span class=\"command\">\\r</span><span class=\"command\">\\ncomment</span>: Kommentare<span class=\"command\">\\r</span><span class=\"command\">\\narchive</span>_a: Archiv<span class=\"command\">\\r</span><span class=\"command\">\\narchive</span>_b: Archiv: <span class=\"comment\">%s\\r\\npage: Seite %d\\r\\nrecent_posts: Neueste Artikel\\n\\u0000',</span></div><div class=\"line\">     position: 189,</div><div class=\"line\">     line: 9,</div><div class=\"line\">     column: 17 <span class=\"special\">}</span>,</div><div class=\"line\">  message: 'Process failed: languages/de.yml',</div><div class=\"line\">  domain: </div><div class=\"line\">   <span class=\"special\">{</span> domain: null,</div><div class=\"line\">     _events: <span class=\"special\">{</span> error: <span class=\"special\">[</span>Function<span class=\"special\">]</span> <span class=\"special\">}</span>,</div><div class=\"line\">     _maxListeners: 10,</div><div class=\"line\">     members: <span class=\"special\">[</span> <span class=\"special\">[</span>Object<span class=\"special\">]</span> <span class=\"special\">]</span> <span class=\"special\">}</span>,</div><div class=\"line\">  domainThrown: true,</div><div class=\"line\">  stack: undefined <span class=\"special\">}</span></div></pre></td></tr></table></figure>\n\n<p>看到第二句我就搜了一下，结果原因是hexo升级，<strong>Yaml Parser做出了一定的修改</strong>。</p>\n<p>解决办法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>. 将主题<span class=\"keyword\">language</span>下的有空格的项都需要加上双引号。<span class=\"keyword\">tag</span> cloud --&gt; <span class=\"string\">\"tag cloud\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2</span>. 如果用的默认主题light，可以直接拉取最新主题，覆盖<span class=\"keyword\">language</span>文件夹即可。$ git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/tommy351/hexo-theme-light themes/</div></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<p><a href=\"https://github.com/wileam/code/blob/master/source/_posts/update-hexo.md\" target=\"_blank\" rel=\"external\">https://github.com/wileam/code/blob/master/source/_posts/update-hexo.md</a></p>\n<p><a href=\"http://www.huangyunkun.com/2014/07/31/hexo-update-error-with-yaml-parser/\" target=\"_blank\" rel=\"external\">http://www.huangyunkun.com/2014/07/31/hexo-update-error-with-yaml-parser/</a></p>\n","source":"_posts/Hexo-升级报错.md","raw":"title: Hexo 升级报错\ndate: 2014-09-26 00:12:30\ntags: hexo\n---\n\n在mac上好不容易装了node(这几天node一直没有安装成功，原来是安装包错误！！！)，等到安装hexo之后，运行：\n\n\thexo server\n\n然后就报错：\n\n```\n{ name: 'HexoError',\n  reason: 'incomplete explicit mapping pair; a key node is missed',\n  mark: \n   { name: null,\n     buffer: 'categories: Kategorien\\r\\nsearch: Suche\\r\\ntags: Tags\\r\\ntagcloud: Tag-Cloud\\r\\ntweets: Tweets\\r\\nprev: Vorherige Seite\\r\\nnext: Nächste Seite\\r\\ncomment: Kommentare\\r\\narchive_a: Archiv\\r\\narchive_b: Archiv: %s\\r\\npage: Seite %d\\r\\nrecent_posts: Neueste Artikel\\n\\u0000',\n     position: 189,\n     line: 9,\n     column: 17 },\n  message: 'Process failed: languages/de.yml',\n  domain: \n   { domain: null,\n     _events: { error: [Function] },\n     _maxListeners: 10,\n     members: [ [Object] ] },\n  domainThrown: true,\n  stack: undefined }\n```\n\n看到第二句我就搜了一下，结果原因是hexo升级，__Yaml Parser做出了一定的修改__。\n\n解决办法：\n\n```\n1. 将主题language下的有空格的项都需要加上双引号。tag cloud --> \"tag cloud\"\n\n2. 如果用的默认主题light，可以直接拉取最新主题，覆盖language文件夹即可。$ git clone https://github.com/tommy351/hexo-theme-light themes/\n```\n\n参考：\n\nhttps://github.com/wileam/code/blob/master/source/_posts/update-hexo.md\n\nhttp://www.huangyunkun.com/2014/07/31/hexo-update-error-with-yaml-parser/\n\n\n\n\n\n","slug":"Hexo-升级报错","updated":1415105931000,"excerpt":"","_id":"024x3d9tn7v0o8g5","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"JavaScript技巧揭秘","date":1411807267000,"tags":["3wk5v3misc92hge2"],"content":"<p>Javascript中有许多技巧被有经验的开发者广泛使用。它们并不显而易见，特别是对初级开发者。这些技巧利用了语言特点，从侧面实现了语言本身不能直接实现的目标。下面我对这些技巧做了一个解释说明的专辑。</p>\n<p>你应该知道其中多数技巧是hack,并不是用在日常的开发中的。这篇文章的目的是解释它们是如何工作的，并不赞同使用它们。</p>\n<p><strong>使用!!来进行Boolean值转换</strong></p>\n<p>JavaScript中的一切变量都可以转换为true或false，这意味着你如果把变量放到if表达式中，会根据转换结果自动选择执行真分支还是假分支。</p>\n<p>0，false，””，null，undefined，NaN可以转换为false，其他值会转换为真。有时你希望一个值转换为boolean值，你可以使用“||”。</p>\n<p>另一方面你可以使用if(x)来代替if(x == ‘test’)。当x是空值时，它会执行else分支。</p>\n<p><strong>字符串变为数字_</strong></p>\n<p>字符串变为数字最常用的方法当属parseInt(x,10)和parseFloat(),还有一种不常用的就是 “3” - 0。判断一个值是否为数字有个技巧：</p>\n<pre><code><span class=\"attribute\">x ==</span>=<span class=\"string\"> +x</span>\n</code></pre><p><strong>使用||提供默认值</strong></p>\n<p>在JavaScript中||时一个“<a href=\"http://en.wikipedia.org/wiki/Short-circuit_evaluation\" target=\"_blank\" rel=\"external\">short-circuit evaluation</a>”，同样也广泛应用于其他语言当中。这个操作符首先会执行左侧表达式，当值为假时，执行右侧的表达式。考虑下面的一个例子：</p>\n<pre><code><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setAge</span><span class=\"params\">(age)</span></span>{\n    <span class=\"keyword\">this</span>.age = age || <span class=\"number\">10</span>;\n}\nsetAge()\n</code></pre><p>我们没有提供age参数，因此 age || 10 会返回 10，这是提供默认值的好方法，其实上面的例子等价于：</p>\n<pre><code><span class=\"keyword\">var</span> age;\n\n<span class=\"keyword\">if</span>(age){\n    <span class=\"keyword\">this</span>.age = age;\n}<span class=\"keyword\">else</span>{\n    <span class=\"keyword\">this</span>.age = <span class=\"number\">10</span>;\n}\n</code></pre><p>第一个例子很简明，以至于你会经常看到。</p>\n<p>我个人非常喜欢这个模式的简明，但是上面的例子有个问题：不能给年龄设置为0。改进方法：</p>\n<p>原作者的：</p>\n<pre><code><span class=\"keyword\">this</span>.age = (<span class=\"keyword\">typeof</span> age !== <span class=\"string\">'undefined'</span>) ? age : <span class=\"number\">10</span>;\n</code></pre><p>但是虽然上面的方法可以设置为0，但是此时依旧可以设置为null。所以下面是我的方法：</p>\n<pre><code>this.<span class=\"variable\">age =</span> (<span class=\"variable\">age =</span>== +age) ? age : <span class=\"number\">10</span>;\n</code></pre><p><strong>使用void 0 来代替undefined</strong></p>\n<p>关键词void接受一个参数并且一直返回undefined，但为何不直接使用undefined呢？因为在一些浏览器中可以重写undefined，同样在一些框架中也可以看到。在<a href=\"http://stackoverflow.com/questions/8783510/javascript-how-dangerous-is-it-really-to-assume-undefined-is-not-overwritten\" target=\"_blank\" rel=\"external\">EC5</a>中浏览器是不可以重写undefined的。</p>\n<p><strong>使用(function(){ })()实现封装模式</strong></p>\n<p>当你希望需要封装时，你可以将代码包裹在一个匿名函数并可以立即执行的函数里面。Javascript里面只有两种作用域：全局和函数作用域，看看<a href=\"http://ariya.ofilabs.com/2013/05/es6-and-block-scope.html\" target=\"_blank\" rel=\"external\">ECMA6 block scopes</a>。你写在全局的变量，可以在任何地方使用；正常情况下你希望使用函数将多数代码封装同时对全局作用域只提供接口。所以这种模式会很好用，注意下面的例子：</p>\n<pre><code>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">div</span><span class=\"params\">(a, b)</span> </span>{\n    <span class=\"keyword\">return</span> a / b;\n  }\n\n  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divBy5</span><span class=\"params\">(x)</span> </span>{\n    <span class=\"keyword\">return</span> div(x, <span class=\"number\">5</span>);\n  }\n\n  <span class=\"built_in\">window</span>.divBy5 = divBy5;\n})()\n\ndiv <span class=\"comment\">// =&gt; undefined</span>\ndivBy5(<span class=\"number\">10</span>); <span class=\"comment\">// =&gt; 2</span>\n</code></pre><p>在以上提到的所有技巧里面，这是一个副作用最小的推荐使用，以此来减少内部逻辑代码暴露到全局作用域中。</p>\n<p>综诉：我想提醒的是你的代码对于其他开发者一定要简介明了。语言本身提供的结构一般优于人造的方法。</p>\n<p>上面提到的一些问题在即将到来的ES6中将得到解决。例如在将来你不需要使用复杂的<strong>age = age || 10</strong>模式，因为ES6允许使用更好的模式来提供默认值：</p>\n<pre><code><span class=\"keyword\">function</span>(age = <span class=\"number\">10</span>){\n    <span class=\"keyword\">...</span>\n}\n</code></pre><p>另一个例子是，你将不再需要(function(){})()模式，当高级浏览器实现 <a href=\"http://eviltrout.com/2014/05/03/getting-started-with-es6.html\" target=\"_blank\" rel=\"external\">EC6 modules</a></p>\n<p>原文：<a href=\"http://blog.mdnbar.com/javascript-common-tricks?utm_source=javascriptweekly&amp;utm_medium=email\" target=\"_blank\" rel=\"external\">http://blog.mdnbar.com/javascript-common-tricks?utm_source=javascriptweekly&amp;utm_medium=email</a></p>\n<p>资源：</p>\n<p>如果你希望了解更多技巧，请看下面的链接：</p>\n<ol>\n<li><p><a href=\"https://github.com/jed/140bytes/wiki/Byte-saving-techniques\" target=\"_blank\" rel=\"external\">Byte Saving Techniques</a></p>\n</li>\n<li><p><a href=\"https://github.com/miguelmota/javascript-idiosyncrasies\" target=\"_blank\" rel=\"external\">JavaScript Idiosyncrasies (kinda)</a></p>\n</li>\n<li><p><a href=\"https://code.google.com/p/jslibs/wiki/JavascriptTips\" target=\"_blank\" rel=\"external\">JavaScript language advanced Tips &amp; Tricks</a></p>\n</li>\n<li><p><a href=\"http://modernweb.com/2013/12/23/45-useful-javascript-tips-tricks-and-best-practices/\" target=\"_blank\" rel=\"external\">45-useful-javascript-tips-tricks-and-best-practices</a></p>\n</li>\n</ol>\n","source":"_posts/JavaScript技巧揭秘.md","raw":"title: JavaScript技巧揭秘\ndate: 2014-09-27 16:41:07\ntags: Javascript\n---\nJavascript中有许多技巧被有经验的开发者广泛使用。它们并不显而易见，特别是对初级开发者。这些技巧利用了语言特点，从侧面实现了语言本身不能直接实现的目标。下面我对这些技巧做了一个解释说明的专辑。\n\n你应该知道其中多数技巧是hack,并不是用在日常的开发中的。这篇文章的目的是解释它们是如何工作的，并不赞同使用它们。\n\n__使用!!来进行Boolean值转换__\n\nJavaScript中的一切变量都可以转换为true或false，这意味着你如果把变量放到if表达式中，会根据转换结果自动选择执行真分支还是假分支。\n\n0，false，\"\"，null，undefined，NaN可以转换为false，其他值会转换为真。有时你希望一个值转换为boolean值，你可以使用“||”。\n\n另一方面你可以使用if(x)来代替if(x == 'test')。当x是空值时，它会执行else分支。\n\n__字符串变为数字___\n\n字符串变为数字最常用的方法当属parseInt(x,10)和parseFloat(),还有一种不常用的就是 \"3\" - 0。判断一个值是否为数字有个技巧：\n\n\tx === +x\n\n__使用||提供默认值__\n\n在JavaScript中||时一个“[short-circuit evaluation](http://en.wikipedia.org/wiki/Short-circuit_evaluation)”，同样也广泛应用于其他语言当中。这个操作符首先会执行左侧表达式，当值为假时，执行右侧的表达式。考虑下面的一个例子：\n\n\tfunction setAge(age){\n\t\tthis.age = age || 10;\n\t}\n\tsetAge()\n\n我们没有提供age参数，因此 age || 10 会返回 10，这是提供默认值的好方法，其实上面的例子等价于：\n\n\tvar age;\n\n\tif(age){\n\t\tthis.age = age;\n\t}else{\n\t\tthis.age = 10;\n\t}\n\n第一个例子很简明，以至于你会经常看到。\n\n我个人非常喜欢这个模式的简明，但是上面的例子有个问题：不能给年龄设置为0。改进方法：\n\n原作者的：\n\n\tthis.age = (typeof age !== 'undefined') ? age : 10;\n\n但是虽然上面的方法可以设置为0，但是此时依旧可以设置为null。所以下面是我的方法：\n\n\tthis.age = (age === +age) ? age : 10;\n\n__使用void 0 来代替undefined__\n\n关键词void接受一个参数并且一直返回undefined，但为何不直接使用undefined呢？因为在一些浏览器中可以重写undefined，同样在一些框架中也可以看到。在[EC5](http://stackoverflow.com/questions/8783510/javascript-how-dangerous-is-it-really-to-assume-undefined-is-not-overwritten)中浏览器是不可以重写undefined的。\n\n__使用(function(){ })()实现封装模式__\n\n当你希望需要封装时，你可以将代码包裹在一个匿名函数并可以立即执行的函数里面。Javascript里面只有两种作用域：全局和函数作用域，看看[ECMA6 block scopes](http://ariya.ofilabs.com/2013/05/es6-and-block-scope.html)。你写在全局的变量，可以在任何地方使用；正常情况下你希望使用函数将多数代码封装同时对全局作用域只提供接口。所以这种模式会很好用，注意下面的例子：\n\n\t(function() {\n\t  function div(a, b) {\n\t    return a / b;\n\t  }\n\n\t  function divBy5(x) {\n\t    return div(x, 5);\n\t  }\n\n\t  window.divBy5 = divBy5;\n\t})()\n\n\tdiv // => undefined\n\tdivBy5(10); // => 2\n\n在以上提到的所有技巧里面，这是一个副作用最小的推荐使用，以此来减少内部逻辑代码暴露到全局作用域中。\n\n综诉：我想提醒的是你的代码对于其他开发者一定要简介明了。语言本身提供的结构一般优于人造的方法。\n\n上面提到的一些问题在即将到来的ES6中将得到解决。例如在将来你不需要使用复杂的__age = age || 10__模式，因为ES6允许使用更好的模式来提供默认值：\n\n\tfunction(age = 10){\n\t\t...\n\t}\n\n另一个例子是，你将不再需要(function(){})()模式，当高级浏览器实现 [EC6 modules](http://eviltrout.com/2014/05/03/getting-started-with-es6.html)\n\n原文：http://blog.mdnbar.com/javascript-common-tricks?utm_source=javascriptweekly&utm_medium=email\n\n\n资源：\n\n如果你希望了解更多技巧，请看下面的链接：\n\n1. [Byte Saving Techniques](https://github.com/jed/140bytes/wiki/Byte-saving-techniques)\n\n2. [JavaScript Idiosyncrasies (kinda)](https://github.com/miguelmota/javascript-idiosyncrasies)\n\n3. [JavaScript language advanced Tips & Tricks](https://code.google.com/p/jslibs/wiki/JavascriptTips)\n\n4. [45-useful-javascript-tips-tricks-and-best-practices](http://modernweb.com/2013/12/23/45-useful-javascript-tips-tricks-and-best-practices/)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"JavaScript技巧揭秘","updated":1415105931000,"excerpt":"","_id":"d9n85bxkhpltnasi","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Javascript算法-排序","date":1410242085000,"tags":["3wk5v3misc92hge2"],"content":"<p>笔试会遇到一些算法问题，为了不被虐，也是为了增加知识，开始一个系列的算法学习。</p>\n<p><strong>交换排序的基本思想是：两两比较待排序记录的关键字，发现两个记录的次序相反时即进行交换，直到没有反序的记录为止。</strong></p>\n<h2 id=\"冒泡排序\">冒泡排序</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span><span class=\"params\">(array)</span></span>{</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 是否为数组</span></div><div class=\"line\">    <span class=\"keyword\">var</span> isArray = Object.prototype.toString.call(<span class=\"keyword\">array</span>).slice(<span class=\"number\">8</span>,-<span class=\"number\">1</span>).toLowerCase() === <span class=\"string\">'array'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(!isArray){</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">array</span> + <span class=\"string\">' is not an Array!'</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"keyword\">array</span>.length,</div><div class=\"line\">        tmp;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++){</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; n - i; j++){</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">array</span>[j - <span class=\"number\">1</span>] &gt; <span class=\"keyword\">array</span>[j]){</div><div class=\"line\">                tmp = <span class=\"keyword\">array</span>[j - <span class=\"number\">1</span>];</div><div class=\"line\">                <span class=\"keyword\">array</span>[j - <span class=\"number\">1</span>] = <span class=\"keyword\">array</span>[j];</div><div class=\"line\">                <span class=\"keyword\">array</span>[j] = tmp;</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>调用：</p>\n<pre><code><span class=\"function\">sort</span>(<span class=\"attr_selector\">[119,20,10,3]</span>) <span class=\"comment\">//[3,10,20,119]</span>\n\n<span class=\"function\">sort</span>(123) <span class=\"comment\">//123 is not an Array.</span>\n</code></pre>","source":"_posts/Javascript算法-排序.md","raw":"title: Javascript算法-排序\ndate: 2014-09-09 13:54:45\ntags: Javascript\n---\n笔试会遇到一些算法问题，为了不被虐，也是为了增加知识，开始一个系列的算法学习。\n\n__交换排序的基本思想是：两两比较待排序记录的关键字，发现两个记录的次序相反时即进行交换，直到没有反序的记录为止。__\n\n##冒泡排序##\n\n\n```\nfunction sort(array){\n\n    // 是否为数组\n    var isArray = Object.prototype.toString.call(array).slice(8,-1).toLowerCase() === 'array';\n\n    if(!isArray){\n        return array + ' is not an Array!';\n    }\n\n    var n = array.length,\n        tmp;\n\n    for(var i = 0; i < n; i++){\n        for(var j = i + 1; j < n - i; j++){\n            if(array[j - 1] > array[j]){\n                tmp = array[j - 1];\n                array[j - 1] = array[j];\n                array[j] = tmp;\n            }\n        }\n    }\n    return array;\n}\n```\n\n调用：\n\n    sort([119,20,10,3]) //[3,10,20,119]\n\n    sort(123) //123 is not an Array.\n","slug":"Javascript算法-排序","updated":1415105931000,"excerpt":"","_id":"ln1o91378xaeypr3","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Karma和Jasmine","date":1408501724000,"tags":[],"content":"<h3 id=\"什么是Karma?\">什么是Karma?</h3>\n<p>Karma是Google出品，前身叫“Testacular”，主要目的：</p>\n<pre><code>The main goal <span class=\"keyword\">for</span> Karma <span class=\"keyword\">is</span> <span class=\"keyword\">to</span> bring <span class=\"keyword\">a</span> productive testing environment <span class=\"keyword\">to</span> developers.\n</code></pre><p>背景：</p>\n<pre><code>We found <span class=\"keyword\">that</span> we were struggling <span class=\"keyword\">with</span> existing tools, so we decided <span class=\"keyword\">to</span> <span class=\"command\">write</span>\nour own test runner. We wanted a test runner <span class=\"keyword\">that</span> would meet all <span class=\"keyword\">of</span> our needs \n<span class=\"keyword\">for</span> both quick development <span class=\"keyword\">and</span> continuous integration <span class=\"comment\">-- a truly spectacular test runner. We've called it Testacular.</span>\n</code></pre><p>大意：</p>\n<pre><code>为了满足我们（google）自己的测试运行器，满足快速开发和持续集成的需求。\n</code></pre><h3 id=\"什么是Jasmine?\">什么是Jasmine?</h3>\n<pre><code>Jasmine <span class=\"keyword\">is</span> a behavior-driven development framework <span class=\"keyword\">for</span> testing JavaScript code.\nIt <span class=\"keyword\">does</span> <span class=\"keyword\">not</span> depend <span class=\"function_start\"><span class=\"keyword\">on</span></span> any other JavaScript frameworks. It <span class=\"keyword\">does</span> <span class=\"keyword\">not</span> require a DOM. \nAnd <span class=\"keyword\">it</span> has a clean, obvious syntax so <span class=\"keyword\">that</span> you can easily <span class=\"command\">write</span> tests.\n</code></pre><p>类似的框架：Mocha、QUnit。</p>\n<a id=\"more\"></a>\n\n<p>实例：（该实例基于node,请先安装。）</p>\n<p>1). 新建项目文件夹：</p>\n<pre><code><span class=\"built_in\">mkdir</span> karma &amp;&amp;　<span class=\"keyword\">cd</span> karma\n</code></pre><p>2). 安装Karma</p>\n<pre><code>npm <span class=\"operator\"><span class=\"keyword\">install</span> -g karma</span>\n</code></pre><p>3). 运行karma</p>\n<pre><code>karma <span class=\"operator\"><span class=\"keyword\">start</span></span>\n</code></pre><p>得到下面类似信息：</p>\n<pre><code>INFO [karma]: Karma v0.10.2 server started at http://localhost:9876/INFO \n[<span class=\"link_reference\">Chrome 28.0.1500 (Windows 7)</span>]:<span class=\"link_url\"> Connected on socket nIlM1yUy6ELMp5ZTN9Ek</span>\n</code></pre><p>4). karma+Jasmine配置</p>\n<pre><code>karma <span class=\"keyword\">init</span>\n</code></pre><p>接着会看到许多选择信息</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">Which testing framework <span class=\"keyword\">do</span> you want <span class=\"keyword\">to</span> use ?</div><div class=\"line\">Press <span class=\"keyword\">tab</span> <span class=\"keyword\">to</span> <span class=\"keyword\">list</span> possible <span class=\"keyword\">options</span>. Enter <span class=\"keyword\">to</span> <span class=\"keyword\">move</span> <span class=\"keyword\">to</span> the <span class=\"keyword\">next</span> question.</div><div class=\"line\">&gt; jasmine</div><div class=\"line\"></div><div class=\"line\">Do you want <span class=\"keyword\">to</span> use Require.js ?</div><div class=\"line\">This will <span class=\"built_in\">add</span> Require.js plugin.</div><div class=\"line\">Press <span class=\"keyword\">tab</span> <span class=\"keyword\">to</span> <span class=\"keyword\">list</span> possible <span class=\"keyword\">options</span>. Enter <span class=\"keyword\">to</span> <span class=\"keyword\">move</span> <span class=\"keyword\">to</span> the <span class=\"keyword\">next</span> question.</div><div class=\"line\">&gt; <span class=\"keyword\">no</span></div><div class=\"line\"></div><div class=\"line\">Do you want <span class=\"keyword\">to</span> capture <span class=\"keyword\">a</span> browser automatically ?</div><div class=\"line\">Press <span class=\"keyword\">tab</span> <span class=\"keyword\">to</span> <span class=\"keyword\">list</span> possible <span class=\"keyword\">options</span>. Enter <span class=\"built_in\">empty</span> <span class=\"built_in\">string</span> <span class=\"keyword\">to</span> <span class=\"keyword\">move</span> <span class=\"keyword\">to</span> the <span class=\"keyword\">next</span> question.</div><div class=\"line\">&gt; Chrome</div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">What <span class=\"keyword\">is</span> the location of your <span class=\"keyword\">source</span> <span class=\"built_in\">and</span> test <span class=\"keyword\">files</span> ?</div><div class=\"line\">You can use <span class=\"built_in\">glob</span> patterns, eg. <span class=\"string\">\"js/*.js\"</span> <span class=\"built_in\">or</span> <span class=\"string\">\"test/**/*Spec.js\"</span>.</div><div class=\"line\">Enter <span class=\"built_in\">empty</span> <span class=\"built_in\">string</span> <span class=\"keyword\">to</span> <span class=\"keyword\">move</span> <span class=\"keyword\">to</span> the <span class=\"keyword\">next</span> question.</div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">Should any of the <span class=\"keyword\">files</span> included by the <span class=\"keyword\">previous</span> patterns <span class=\"keyword\">be</span> excluded ?</div><div class=\"line\">You can use <span class=\"built_in\">glob</span> patterns, eg. <span class=\"string\">\"**/*.swp\"</span>.</div><div class=\"line\">Enter <span class=\"built_in\">empty</span> <span class=\"built_in\">string</span> <span class=\"keyword\">to</span> <span class=\"keyword\">move</span> <span class=\"keyword\">to</span> the <span class=\"keyword\">next</span> question.</div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\">Do you want Karma <span class=\"keyword\">to</span> watch <span class=\"keyword\">all</span> the <span class=\"keyword\">files</span> <span class=\"built_in\">and</span> run the tests <span class=\"keyword\">on</span> <span class=\"keyword\">change</span> ?</div><div class=\"line\">Press <span class=\"keyword\">tab</span> <span class=\"keyword\">to</span> <span class=\"keyword\">list</span> possible <span class=\"keyword\">options</span>.</div><div class=\"line\">&gt; yes</div><div class=\"line\"></div><div class=\"line\">Config <span class=\"keyword\">file</span> generated at <span class=\"string\">\"F:\\workspace\\karma\\karma.conf.js\"</span>.</div></pre></td></tr></table></figure>\n\n<p>5). 安装karma-jasmine集成包：</p>\n<pre><code>npm <span class=\"operator\"><span class=\"keyword\">install</span> karma-jasmine</span>\n</code></pre><p>6). 安装karma-chrome-launcher（注意如果上面要测试的浏览器还有别的，其余的也要安装）</p>\n<pre><code>npm <span class=\"operator\"><span class=\"keyword\">install</span> karma-chrome-launcher <span class=\"comment\">--save-dev</span></span>\n</code></pre><p><strong>开始测试，需求：实现单词倒写功能：“ABCD”=&gt;“CDBA”</strong></p>\n<p>1). 新建文件 src.js：</p>\n<pre><code><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span><span class=\"params\">(name)</span>{</span>\n    <span class=\"keyword\">return</span> name.<span class=\"built_in\">split</span>(<span class=\"string\">\"\"</span>).<span class=\"built_in\">reverse</span>().<span class=\"built_in\">join</span>(<span class=\"string\">\"\"</span>);\n}\n</code></pre><p>2). 测试文件 test.js</p>\n<pre><code>describe(<span class=\"string\">\"A suite of basic functions\"</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    it(<span class=\"string\">\"reverse word\"</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n        expect(<span class=\"string\">\"DCBA\"</span>).toEqual(reverse(<span class=\"string\">\"ABCD\"</span>));\n    });\n});\n</code></pre><p>3). 修改配置karma.conf.js</p>\n<pre><code><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(config)</span> </span>{\n    config.set({\n        basePath: <span class=\"string\">''</span>,\n        frameworks: [<span class=\"string\">'jasmine'</span>],\n        files: [<span class=\"string\">'*.js'</span>],\n        exclude: [<span class=\"string\">'karma.conf.js'</span>],\n        reporters: [<span class=\"string\">'progress'</span>],\n        port: <span class=\"number\">9876</span>,\n        colors: <span class=\"literal\">true</span>,\n        logLevel: config.LOG_INFO,\n        autoWatch: <span class=\"literal\">true</span>,\n        browsers: [<span class=\"string\">'Chrome'</span>],\n        captureTimeout: <span class=\"number\">60000</span>,\n        singleRun: <span class=\"literal\">false</span>\n    });\n};\n</code></pre><p>4). 运行karma</p>\n<pre><code>karma start karma.<span class=\"keyword\">conf</span>.js\n</code></pre><p>得到如下类似信息：</p>\n<pre><code>INFO [karma]: Karma v0<span class=\"number\">.12</span><span class=\"number\">.22</span> server started <span class=\"keyword\">at</span> <span class=\"keyword\">http</span>://localhost:<span class=\"number\">9876</span>/\nINFO [launcher]: Starting browser Chrome\nINFO [Chrome <span class=\"number\">36.0</span><span class=\"number\">.1985</span> (Windows <span class=\"number\">7</span>)]: Connected <span class=\"command\"><span class=\"keyword\">on</span> <span class=\"title\">socket</span> <span class=\"title\">lJRdB1wQiahW6-7IpqoI</span> <span class=\"title\">wi</span></span>\nth id <span class=\"number\">82373062</span>\nChrome <span class=\"number\">36.0</span><span class=\"number\">.1985</span> (Windows <span class=\"number\">7</span>): Executed <span class=\"number\">1</span> <span class=\"operator\">of</span> <span class=\"number\">1</span> SUCCESS (<span class=\"number\">0.01</span> <span class=\"built_in\">secs</span> / <span class=\"number\">0.002</span> <span class=\"built_in\">secs</span>)\n</code></pre><ol>\n<li>修改test.js</li>\n</ol>\n<pre><code>describe(<span class=\"string\">\"A suite of basic functions\"</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    it(<span class=\"string\">\"reverse word\"</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n        expect(<span class=\"string\">\"DCBA\"</span>).toEqual(reverse(<span class=\"string\">\"ABCD\"</span>));\n        expect(<span class=\"string\">\"Conan\"</span>).toEqual(reverse(<span class=\"string\">\"nano\"</span>));\n    });\n});\n</code></pre><p>此时会得到错误：</p>\n<pre><code>INFO [karma]: Karma v0<span class=\"number\">.12</span><span class=\"number\">.22</span> server started <span class=\"keyword\">at</span> <span class=\"keyword\">http</span>://localhost:<span class=\"number\">9876</span>/\nINFO [launcher]: Starting browser Chrome\nINFO [Chrome <span class=\"number\">36.0</span><span class=\"number\">.1985</span> (Windows <span class=\"number\">7</span>)]: Connected <span class=\"command\"><span class=\"keyword\">on</span> <span class=\"title\">socket</span> <span class=\"title\">Kta8N3MgRiMy4FLyp82H</span> <span class=\"title\">wi</span></span>\nth id <span class=\"number\">72338317</span>\nChrome <span class=\"number\">36.0</span><span class=\"number\">.1985</span> (Windows <span class=\"number\">7</span>) A suite <span class=\"operator\">of</span> basic <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span> <span class=\"title\">word</span> <span class=\"title\">FAILED</span></span>\n        Expected <span class=\"string\">'Conan'</span> <span class=\"built_in\">to</span> equal <span class=\"string\">'onan'</span>.\n        Error: Expected <span class=\"string\">'Conan'</span> <span class=\"built_in\">to</span> equal <span class=\"string\">'onan'</span>.\n            <span class=\"keyword\">at</span> Object.&lt;anonymous&gt; (F:/wordspace/karma/test.js:<span class=\"number\">8</span>:<span class=\"number\">19</span>)\nChrome <span class=\"number\">36.0</span><span class=\"number\">.1985</span> (Windows <span class=\"number\">7</span>): Executed <span class=\"number\">1</span> <span class=\"operator\">of</span> <span class=\"number\">1</span> (<span class=\"number\">1</span> FAILED) ERROR (<span class=\"number\">0.015</span> <span class=\"built_in\">secs</span> / <span class=\"number\">0.0</span>\n<span class=\"number\">04</span> <span class=\"built_in\">secs</span>)\n</code></pre><p>这错误是正常的。</p>\n<p>参考：</p>\n<ol>\n<li><a href=\"http://googletesting.blogspot.jp/2012/11/testacular-spectacular-test-runner-for.html\" target=\"_blank\" rel=\"external\">http://googletesting.blogspot.jp/2012/11/testacular-spectacular-test-runner-for.html</a></li>\n<li><a href=\"http://blog.fens.me/nodejs-karma-jasmine/\" target=\"_blank\" rel=\"external\">http://blog.fens.me/nodejs-karma-jasmine/</a></li>\n<li><a href=\"https://egghead.io/lessons/unit-testing-introduction-to-karma\" target=\"_blank\" rel=\"external\">https://egghead.io/lessons/unit-testing-introduction-to-karma</a></li>\n<li><a href=\"http://www.slideshare.net/IgorNapierala/jasmine-presentation-23905530?next_slideshow=1（翻墙）\" target=\"_blank\" rel=\"external\">http://www.slideshare.net/IgorNapierala/jasmine-presentation-23905530?next_slideshow=1（翻墙）</a></li>\n<li><a href=\"http://blog.segmentfault.com/bornkiller/1190000000623274\" target=\"_blank\" rel=\"external\">http://blog.segmentfault.com/bornkiller/1190000000623274</a></li>\n</ol>\n","source":"_posts/Karma和Jasmine.md","raw":"title: Karma和Jasmine\ndate: 2014-08-20 10:28:44\ntags:\n---\n###什么是Karma?###\n\nKarma是Google出品，前身叫“Testacular”，主要目的：\n\n\tThe main goal for Karma is to bring a productive testing environment to developers.\n\n背景：\n\n\tWe found that we were struggling with existing tools, so we decided to write\n\tour own test runner. We wanted a test runner that would meet all of our needs \n\tfor both quick development and continuous integration -- a truly spectacular test runner. We've called it Testacular.\n\n大意：\n\n\t为了满足我们（google）自己的测试运行器，满足快速开发和持续集成的需求。\n\n\n###什么是Jasmine?###\n\n\tJasmine is a behavior-driven development framework for testing JavaScript code.\n\tIt does not depend on any other JavaScript frameworks. It does not require a DOM. \n\tAnd it has a clean, obvious syntax so that you can easily write tests.\n\n类似的框架：Mocha、QUnit。\n\n<!--more-->\n\n实例：（该实例基于node,请先安装。）\n\n1). 新建项目文件夹：\n\n\n\tmkdir karma &&　cd karma\n\n\n2). 安装Karma\n\n\n\tnpm install -g karma\n\n\n3). 运行karma\n\n\n\tkarma start\n\n\n得到下面类似信息：\n\n\n\tINFO [karma]: Karma v0.10.2 server started at http://localhost:9876/INFO \n\t[Chrome 28.0.1500 (Windows 7)]: Connected on socket nIlM1yUy6ELMp5ZTN9Ek\n\n\n\n4). karma+Jasmine配置\n\n\n\tkarma init\n\n\n接着会看到许多选择信息\n\n```\nWhich testing framework do you want to use ?\nPress tab to list possible options. Enter to move to the next question.\n> jasmine\n\nDo you want to use Require.js ?\nThis will add Require.js plugin.\nPress tab to list possible options. Enter to move to the next question.\n> no\n\nDo you want to capture a browser automatically ?\nPress tab to list possible options. Enter empty string to move to the next question.\n> Chrome\n>\n\nWhat is the location of your source and test files ?\nYou can use glob patterns, eg. \"js/*.js\" or \"test/**/*Spec.js\".\nEnter empty string to move to the next question.\n>\n\nShould any of the files included by the previous patterns be excluded ?\nYou can use glob patterns, eg. \"**/*.swp\".\nEnter empty string to move to the next question.\n>\n\nDo you want Karma to watch all the files and run the tests on change ?\nPress tab to list possible options.\n> yes\n\nConfig file generated at \"F:\\workspace\\karma\\karma.conf.js\".\n```\n\n5). 安装karma-jasmine集成包：\n\n\tnpm install karma-jasmine\n\n6). 安装karma-chrome-launcher（注意如果上面要测试的浏览器还有别的，其余的也要安装）\n\n\tnpm install karma-chrome-launcher --save-dev\n\n__开始测试，需求：实现单词倒写功能：“ABCD”=>“CDBA”__\n\n1). 新建文件 src.js：\n\n\n\tfunction reverse(name){\n\t    return name.split(\"\").reverse().join(\"\");\n\t}\n\n\n2). 测试文件 test.js\n\n\n\tdescribe(\"A suite of basic functions\", function() {\n\t    it(\"reverse word\",function(){\n\t        expect(\"DCBA\").toEqual(reverse(\"ABCD\"));\n\t    });\n\t});\n\n\n3). 修改配置karma.conf.js\n\n\n\tmodule.exports = function (config) {\n\t    config.set({\n\t        basePath: '',\n\t        frameworks: ['jasmine'],\n\t        files: ['*.js'],\n\t        exclude: ['karma.conf.js'],\n\t        reporters: ['progress'],\n\t        port: 9876,\n\t        colors: true,\n\t        logLevel: config.LOG_INFO,\n\t        autoWatch: true,\n\t        browsers: ['Chrome'],\n\t        captureTimeout: 60000,\n\t        singleRun: false\n\t    });\n\t};\n\n\n4). 运行karma\n\n\n\tkarma start karma.conf.js\n\n\n得到如下类似信息：\n\n\tINFO [karma]: Karma v0.12.22 server started at http://localhost:9876/\n\tINFO [launcher]: Starting browser Chrome\n\tINFO [Chrome 36.0.1985 (Windows 7)]: Connected on socket lJRdB1wQiahW6-7IpqoI wi\n\tth id 82373062\n\tChrome 36.0.1985 (Windows 7): Executed 1 of 1 SUCCESS (0.01 secs / 0.002 secs)\n\n\n\n5. 修改test.js\n\n\n\tdescribe(\"A suite of basic functions\", function() {\n\t    it(\"reverse word\",function(){\n\t        expect(\"DCBA\").toEqual(reverse(\"ABCD\"));\n\t        expect(\"Conan\").toEqual(reverse(\"nano\"));\n\t    });\n\t});\n\n此时会得到错误：\n\n\tINFO [karma]: Karma v0.12.22 server started at http://localhost:9876/\n\tINFO [launcher]: Starting browser Chrome\n\tINFO [Chrome 36.0.1985 (Windows 7)]: Connected on socket Kta8N3MgRiMy4FLyp82H wi\n\tth id 72338317\n\tChrome 36.0.1985 (Windows 7) A suite of basic function reverse word FAILED\n\t        Expected 'Conan' to equal 'onan'.\n\t        Error: Expected 'Conan' to equal 'onan'.\n\t            at Object.<anonymous> (F:/wordspace/karma/test.js:8:19)\n\tChrome 36.0.1985 (Windows 7): Executed 1 of 1 (1 FAILED) ERROR (0.015 secs / 0.0\n\t04 secs)\n\t\n这错误是正常的。\n\n参考：\n\n1. http://googletesting.blogspot.jp/2012/11/testacular-spectacular-test-runner-for.html\n2. http://blog.fens.me/nodejs-karma-jasmine/\n3. https://egghead.io/lessons/unit-testing-introduction-to-karma\n4. http://www.slideshare.net/IgorNapierala/jasmine-presentation-23905530?next_slideshow=1（翻墙）\n5. http://blog.segmentfault.com/bornkiller/1190000000623274","slug":"Karma和Jasmine","updated":1415105931000,"excerpt":"<h3 id=\"什么是Karma?\">什么是Karma?</h3>\n<p>Karma是Google出品，前身叫“Testacular”，主要目的：</p>\n<pre><code>The main goal <span class=\"keyword\">for</span> Karma <span class=\"keyword\">is</span> <span class=\"keyword\">to</span> bring <span class=\"keyword\">a</span> productive testing environment <span class=\"keyword\">to</span> developers.\n</code></pre><p>背景：</p>\n<pre><code>We found <span class=\"keyword\">that</span> we were struggling <span class=\"keyword\">with</span> existing tools, so we decided <span class=\"keyword\">to</span> <span class=\"command\">write</span>\nour own test runner. We wanted a test runner <span class=\"keyword\">that</span> would meet all <span class=\"keyword\">of</span> our needs \n<span class=\"keyword\">for</span> both quick development <span class=\"keyword\">and</span> continuous integration <span class=\"comment\">-- a truly spectacular test runner. We've called it Testacular.</span>\n</code></pre><p>大意：</p>\n<pre><code>为了满足我们（google）自己的测试运行器，满足快速开发和持续集成的需求。\n</code></pre><h3 id=\"什么是Jasmine?\">什么是Jasmine?</h3>\n<pre><code>Jasmine <span class=\"keyword\">is</span> a behavior-driven development framework <span class=\"keyword\">for</span> testing JavaScript code.\nIt <span class=\"keyword\">does</span> <span class=\"keyword\">not</span> depend <span class=\"function_start\"><span class=\"keyword\">on</span></span> any other JavaScript frameworks. It <span class=\"keyword\">does</span> <span class=\"keyword\">not</span> require a DOM. \nAnd <span class=\"keyword\">it</span> has a clean, obvious syntax so <span class=\"keyword\">that</span> you can easily <span class=\"command\">write</span> tests.\n</code></pre><p>类似的框架：Mocha、QUnit。</p>\n","_id":"hxovkew17qfhfbpi","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Pub/Sub模式","date":1413682313000,"tags":[],"content":"<p>Javascript设计模式那本书也稀里糊涂的看了一遍，并没有在工作中很好的应用。这次公司的项目用到了Pub/Sub模式，最近就仔细看了一下。</p>\n<p>由于自己知识有限，为了严谨还是引用了维基百科的解释：</p>\n<blockquote>\n<p>發布/訂閱（Publish/subscribe 或pub/sub）是一種消息範式，消息的發送者（發布者）不是計劃發送其消息給特定的接收者（訂閱者）。而是發布的消息分為不同的類別，而不需要知道什麼樣的訂閱者訂閱。訂閱者對一個或多個類別表達興趣，於是只接收感興趣的消息，而不需要知道什麼樣的發布者發布的消息。這種發布者和訂閱者的解耦可以允許更好的可擴展性和更為動態的網路拓撲.</p>\n</blockquote>\n<p>发布者和订阅者中间的关系纽带是<strong>消息</strong>（又称主题topic），不需要直接关联。</p>\n<p>其实现实生活中有很多这样的例子：</p>\n<ul>\n<li>订阅彩信</li>\n<li>邮件订阅</li>\n</ul>\n<p>这就带来了其优点：</p>\n<p><strong>解藕</strong>：双方不需要知道对方的存在，由于<strong>主题</strong>是枢纽，双方的对程序／系统的修改都不会影响对方。</p>\n<p>同时由于其优点也带来了副作用：</p>\n<p><strong>死板的语义链接</strong>:发布者发出的数据格式必须和订阅者约定，这就造成修改时的成本。</p>\n<p>概念讲完了，现在看看如何实现：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">var pubsub = {};</div><div class=\"line\">(function(q){</div><div class=\"line\">\t//维护主题和订阅者的对象</div><div class=\"line\">\tvar topics = {},</div><div class=\"line\">\t\tsubUid = -1;</div><div class=\"line\">\tq.publish = function(topic,args){</div><div class=\"line\">\t\t//指定主题不存在则返回</div><div class=\"line\">\t\tif(!topics[topic]){</div><div class=\"line\">\t\t\treturn false;</div><div class=\"line\">\t\t}</div><div class=\"line\">\t\t//取出指定主题下的订阅者和个数</div><div class=\"line\">\t\tvar subscribers = topics[topic],</div><div class=\"line\">\t\t\tlen = subscribers ? subscribers.length : 0;</div><div class=\"line\">\t\t//逐个执行该主题上订阅者的回调方法</div><div class=\"line\">\t\twhile(len--){</div><div class=\"line\">\t\t\tsubscribers[len].func(topic,args);</div><div class=\"line\">\t\t}</div><div class=\"line\">\t\treturn this;</div><div class=\"line\">\t};</div><div class=\"line\">\tq.subscribe = function(topic,func){</div><div class=\"line\">\t\t//指定主题不存在则创建</div><div class=\"line\">\t\tif(!topics[topic]){</div><div class=\"line\">\t\t\ttopics[topic] = [];</div><div class=\"line\">\t\t}</div><div class=\"line\">\t\tvar token = (++subUid).toString();</div><div class=\"line\">\t\t//指定主题中添加订阅者</div><div class=\"line\">\t\ttopics[topic].push({</div><div class=\"line\">\t\t\ttoken:token,</div><div class=\"line\">\t\t\tfunc:func</div><div class=\"line\">\t\t});</div><div class=\"line\">\t\treturn token;</div><div class=\"line\">\t};</div><div class=\"line\">\tq.unsubscribe = function(token){</div><div class=\"line\">\t\tfor(var m in topics){</div><div class=\"line\">\t\t\tif(topics[m]){</div><div class=\"line\">\t\t\t\tfor(var i = 0, j = topics[m].length; i &lt; j; i++){</div><div class=\"line\">\t\t\t\t\t//根据token删除订阅者</div><div class=\"line\">\t\t\t\t\tif(topics[m][i].token === token){</div><div class=\"line\">\t\t\t\t\t\ttopics[m].splice(i,1);</div><div class=\"line\">\t\t\t\t\t\treturn token;</div><div class=\"line\">\t\t\t\t\t}</div><div class=\"line\">\t\t\t\t}</div><div class=\"line\">\t\t\t}</div><div class=\"line\">\t\t}</div><div class=\"line\">\t\treturn this;</div><div class=\"line\">\t};</div><div class=\"line\">}(pubsub));</div></pre></td></tr></table></figure>\n\n<p>订阅：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> messageLoger = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(topics,data)</span></span>{</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Loggin:\"</span> + topics + <span class=\"string\">\":\"</span> + data);</div><div class=\"line\">};</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> subscription = pubsub.subscribe(<span class=\"string\">'inbox/newMessage'</span>,messageLoger);</div><div class=\"line\"></div><div class=\"line\">pubsub.publish(<span class=\"string\">'inbox/newMessage'</span>,<span class=\"string\">'HelloWorld'</span>);</div></pre></td></tr></table></figure>\n\n<p>退订：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pubsub.unsubscribe(subscription);</div><div class=\"line\"></div><div class=\"line\">pubsub.publish(<span class=\"string\">'inbox/newMessage'</span>,<span class=\"string\">'HelloWorld'</span>);</div></pre></td></tr></table></figure>\n\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/fidagu/1/embed\" target=\"_blank\" rel=\"external\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>\n<p> 参考：</p>\n<ol>\n<li><p><a href=\"http://msdn.microsoft.com/en-us/magazine/hh201955.aspx\" target=\"_blank\" rel=\"external\">http://msdn.microsoft.com/en-us/magazine/hh201955.aspx</a></p>\n</li>\n<li><p><a href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript\" target=\"_blank\" rel=\"external\">http://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript</a></p>\n</li>\n<li><p><a href=\"http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern\" target=\"_blank\" rel=\"external\">http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern</a></p>\n</li>\n</ol>\n","source":"_posts/Pub-Sub模式.md","raw":"title: Pub/Sub模式\ndate: 2014-10-19 09:31:53\ntags:\n---\nJavascript设计模式那本书也稀里糊涂的看了一遍，并没有在工作中很好的应用。这次公司的项目用到了Pub/Sub模式，最近就仔细看了一下。\n\n由于自己知识有限，为了严谨还是引用了维基百科的解释：\n\n>發布/訂閱（Publish/subscribe 或pub/sub）是一種消息範式，消息的發送者（發布者）不是計劃發送其消息給特定的接收者（訂閱者）。而是發布的消息分為不同的類別，而不需要知道什麼樣的訂閱者訂閱。訂閱者對一個或多個類別表達興趣，於是只接收感興趣的消息，而不需要知道什麼樣的發布者發布的消息。這種發布者和訂閱者的解耦可以允許更好的可擴展性和更為動態的網路拓撲.\n\n发布者和订阅者中间的关系纽带是__消息__（又称主题topic），不需要直接关联。\n\n其实现实生活中有很多这样的例子：\n\n* 订阅彩信\n* 邮件订阅\n\n这就带来了其优点：\n\n__解藕__：双方不需要知道对方的存在，由于__主题__是枢纽，双方的对程序／系统的修改都不会影响对方。\n\n同时由于其优点也带来了副作用：\n\n__死板的语义链接__:发布者发出的数据格式必须和订阅者约定，这就造成修改时的成本。\n\n概念讲完了，现在看看如何实现：\n\n```\nvar pubsub = {};\n(function(q){\n\t//维护主题和订阅者的对象\n\tvar topics = {},\n\t\tsubUid = -1;\n\tq.publish = function(topic,args){\n\t\t//指定主题不存在则返回\n\t\tif(!topics[topic]){\n\t\t\treturn false;\n\t\t}\n\t\t//取出指定主题下的订阅者和个数\n\t\tvar subscribers = topics[topic],\n\t\t\tlen = subscribers ? subscribers.length : 0;\n\t\t//逐个执行该主题上订阅者的回调方法\n\t\twhile(len--){\n\t\t\tsubscribers[len].func(topic,args);\n\t\t}\n\t\treturn this;\n\t};\n\tq.subscribe = function(topic,func){\n\t\t//指定主题不存在则创建\n\t\tif(!topics[topic]){\n\t\t\ttopics[topic] = [];\n\t\t}\n\t\tvar token = (++subUid).toString();\n\t\t//指定主题中添加订阅者\n\t\ttopics[topic].push({\n\t\t\ttoken:token,\n\t\t\tfunc:func\n\t\t});\n\t\treturn token;\n\t};\n\tq.unsubscribe = function(token){\n\t\tfor(var m in topics){\n\t\t\tif(topics[m]){\n\t\t\t\tfor(var i = 0, j = topics[m].length; i < j; i++){\n\t\t\t\t\t//根据token删除订阅者\n\t\t\t\t\tif(topics[m][i].token === token){\n\t\t\t\t\t\ttopics[m].splice(i,1);\n\t\t\t\t\t\treturn token;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n}(pubsub));\n```\n\n订阅：\n\n```\nvar messageLoger = function(topics,data){\n\tconsole.log(\"Loggin:\" + topics + \":\" + data);\n};\n\nvar subscription = pubsub.subscribe('inbox/newMessage',messageLoger);\n\npubsub.publish('inbox/newMessage','HelloWorld');\n```\n退订：\n\n```\npubsub.unsubscribe(subscription);\n\npubsub.publish('inbox/newMessage','HelloWorld');\n\n```\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/fidagu/1/embed\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script>\n\n 参考：\n\n 1. http://msdn.microsoft.com/en-us/magazine/hh201955.aspx\n\n 2. http://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript\n\n 3. http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern","slug":"Pub-Sub模式","updated":1415105931000,"excerpt":"","_id":"swdbowwnx2mxd1tm","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Sublime Text2 个人常用插件","date":1407201826000,"tags":["8097jatyq6c2k9t4"],"content":"<p>这是个人常用Sublime Text 2的一些常用插件，会陆续更新，这并不是什么必备插件。</p>\n<p>Sublime Text 2的插件安装方法：</p>\n<pre><code><span class=\"bullet\">1. </span>按Ctrl+`调出console\n\n<span class=\"bullet\">2. </span>粘贴以下代码到底部命令行并回车：\n</code></pre><blockquote>\n<p>import urllib2,os;pf=’Package Control.sublime-package’;ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),’wb’).write(urllib2.urlopen(‘<a href=\"http://sublime.wbond.net/&#39;+pf.replace(\" target=\"_blank\" rel=\"external\">http://sublime.wbond.net/&#39;+pf.replace(</a>‘ ‘,’%20’)).read())</p>\n</blockquote>\n<ul>\n<li>Emmet (前端的最爱)</li>\n<li>HTML/CSS/JS Pretty (代码美化)</li>\n<li>DocBlockr (注释)</li>\n<li>AngularJS</li>\n<li>SublimeCodeIntel (代码自动提示Javascript、python)</li>\n<li>ternjs (支持Vim,Emacs等javascript提示)</li>\n<li>ConvertToUTF8 (乱码解决)</li>\n<li>Ctage</li>\n<li>FakeImg.pl(图片占位)</li>\n<li>Placeholders</li>\n<li>Code​Formatter</li>\n<li>SublimeCodeIntel</li>\n</ul>\n<p>技巧：(默认是在Preference-&gt; Settings-User 添加)</p>\n<ul>\n<li>vim 编辑模式</li>\n</ul>\n<blockquote>\n<p><strong>“ignored_packages”: []</strong>,ESC进入 VIM模式。</p>\n</blockquote>\n<ul>\n<li>双击带中划线的代码选中</li>\n</ul>\n<blockquote>\n<p>Preference-&gt; Settings-Default 找到 <strong>“word_separators”</strong>,删除里面的‘-’。</p>\n</blockquote>\n<ul>\n<li>高亮当前行</li>\n</ul>\n<blockquote>\n<p>“highlight_line”: true</p>\n</blockquote>\n<ul>\n<li>设置tab的空格数（我这里设置的是四个）</li>\n</ul>\n<pre><code><span class=\"string\">\"tab_size\"</span>: <span class=\"number\">2</span>,\n\n<span class=\"string\">\"translate_tabs_to_spaces\"</span>: <span class=\"literal\">true</span>\n</code></pre><ul>\n<li>去除行末尾的多余空格</li>\n</ul>\n<pre><code><span class=\"string\">\"trim_trailing_white_space_on_save\"</span>: <span class=\"literal\">true</span>\n</code></pre><p>主题：</p>\n<pre><code>{\n    \"<span class=\"attribute\">theme</span>\": <span class=\"value\"><span class=\"string\">\"Soda Light.sublime-theme\"</span></span>,\n    \"<span class=\"attribute\">soda_folder_icons</span>\": <span class=\"value\"><span class=\"literal\">true</span>\n</span>}\n</code></pre><p>现在我的设置：</p>\n<pre><code>{\n    \"<span class=\"attribute\">color_scheme</span>\": <span class=\"value\"><span class=\"string\">\"Packages/Color Scheme - Default/Monokai.tmTheme\"</span></span>,\n    \"<span class=\"attribute\">font_size</span>\": <span class=\"value\"><span class=\"number\">13.0</span></span>,\n    \"<span class=\"attribute\">highlight_line</span>\": <span class=\"value\"><span class=\"literal\">true</span></span>,\n    \"<span class=\"attribute\">ignored_packages</span>\":\n    <span class=\"value\">[\n    ]</span>,\n    \"<span class=\"attribute\">soda_folder_icons</span>\": <span class=\"value\"><span class=\"literal\">true</span></span>,\n    \"<span class=\"attribute\">theme</span>\": <span class=\"value\"><span class=\"string\">\"Soda Light.sublime-theme\"</span></span>,\n    \"<span class=\"attribute\">tab_size</span>\":<span class=\"value\"><span class=\"number\">4</span></span>,\n    \"<span class=\"attribute\">translate_tabs_to_spaces</span>\": <span class=\"value\"><span class=\"literal\">true</span></span>,\n    \"<span class=\"attribute\">trim_trailing_white_space_on_save</span>\": <span class=\"value\"><span class=\"literal\">true</span>\n</span>}\n</code></pre><p>参考：<a href=\"http://buymeasoda.github.io/soda-theme/\" target=\"_blank\" rel=\"external\">http://buymeasoda.github.io/soda-theme/</a></p>\n<p>更多插件：</p>\n<p><a href=\"https://sublime.wbond.net/\" target=\"_blank\" rel=\"external\">https://sublime.wbond.net/</a></p>\n","source":"_posts/Sublime-Text2-个人常用插件.md","raw":"title: 'Sublime Text2 个人常用插件'\ndate: 2014-08-05 09:23:46\ntags: 工具\n---\n这是个人常用Sublime Text 2的一些常用插件，会陆续更新，这并不是什么必备插件。\n\nSublime Text 2的插件安装方法：\n\n\t1. 按Ctrl+`调出console\n\n\t2. 粘贴以下代码到底部命令行并回车：\n\n> import urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())\n\n\n* Emmet (前端的最爱)\n* HTML/CSS/JS Pretty (代码美化)\n* DocBlockr (注释)\n* AngularJS\n* SublimeCodeIntel (代码自动提示Javascript、python)\n* ternjs (支持Vim,Emacs等javascript提示)\n* ConvertToUTF8 (乱码解决)\n* Ctage\n* FakeImg.pl(图片占位)\n* Placeholders\n* Code​Formatter\n* SublimeCodeIntel\n\n技巧：(默认是在Preference-> Settings-User 添加)\n\n* vim 编辑模式\n\n> __\"ignored_packages\": []__,ESC进入 VIM模式。\n\n* 双击带中划线的代码选中\n\n>Preference-> Settings-Default 找到 __\"word_separators\"__,删除里面的‘-’。\n\n* 高亮当前行\n\n>\"highlight_line\": true\n\n* 设置tab的空格数（我这里设置的是四个）\n\n\n    \"tab_size\": 2,\n\n    \"translate_tabs_to_spaces\": true\n\n\n* 去除行末尾的多余空格\n\n\n    \"trim_trailing_white_space_on_save\": true\n\n\n主题：\n\n\t{\n\t    \"theme\": \"Soda Light.sublime-theme\",\n\t    \"soda_folder_icons\": true\n\t}\n\n现在我的设置：\n\n    {\n        \"color_scheme\": \"Packages/Color Scheme - Default/Monokai.tmTheme\",\n        \"font_size\": 13.0,\n        \"highlight_line\": true,\n        \"ignored_packages\":\n        [\n        ],\n        \"soda_folder_icons\": true,\n        \"theme\": \"Soda Light.sublime-theme\",\n        \"tab_size\":4,\n        \"translate_tabs_to_spaces\": true,\n        \"trim_trailing_white_space_on_save\": true\n    }\n\n\n\n参考：http://buymeasoda.github.io/soda-theme/\n\n更多插件：\n\nhttps://sublime.wbond.net/","slug":"Sublime-Text2-个人常用插件","updated":1415421846000,"excerpt":"","_id":"zl19yiti4jem60a4","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Web Components最佳实践","date":1404603569000,"tags":[],"content":"<p><img src=\"http://img2.picbed.org/uploads/2014/07/web_components_best_practices.jpg\" alt=\"best practices\"></p>\n<p>Web Components是一组新的web平台功能，可以使开发者通过声明式、组合式的途径来构建应用。下面是一些给开发者的一些最佳实践建议:</p>\n<ul>\n<li><p>命名空间：自定义元素应该用破折号隔开（例如：<code>&lt;x-tabs&gt;,&lt;my-tabs&gt;</code>)，破折号前面的字符才是有效的命名空间。你应该使其简短、唯一，尽可能不要覆盖其他人的前缀。如果你的组件已经有许多开发感兴趣，应该使组件的前缀小于三个字符。</p>\n</li>\n<li><p>尽可能模仿内建元素：你的组件对其他开发者来说就应该像内嵌组件一样。如果以后正式公开组件的API时,若组件的API感觉很另类，你是否会感觉到尴尬？</p>\n</li>\n<li><p>静默处理：组件应该想本地DOM元素，所以应该避免在普通元素交互时，出现js 错误，例如：你可以在ul中嵌套div,但它并不会按照你的想法渲染，可是它并不会抛出错误。</p>\n</li>\n<li><p>属性定义数据输入：使用属性来传递配置信息，用boolean属性来表示boolean值，例如：<code>&lt;my-element selected&gt;来代替&lt;my-element seleted=&quot;true&quot;&gt;</code>.</p>\n</li>\n<li><p>事件定义数据输出：除了传输的数据信息巨大或者改变极其频繁之外，我们应该使用事件来传递组件里的信息。</p>\n</li>\n<li><p>引入依赖的文件：引入你组件的所依赖，不要担心<link rel=\"import\" ...=\"\">冗余，只要设置合理的缓存头，它们只会在首次会被加载，使用http2.0可以减少多文件的消耗，或者在你发布app时，还可以合并和压缩它们到一个文件里面。</p>\n</li>\n<li><p>为组件写文档：方便其他人使用你的组件，组件有许多方法可作为它们的API,下面列出了一些容易忽略的地方：</p>\n<blockquote>\n<ol>\n<li>通过实例标记可以简明的描述属性。</li>\n<li>若一个组件是设计嵌套在另一个中的，需要表明在其中如何使用。</li>\n<li>列出js方法和属性</li>\n<li>列出包含的事件</li>\n<li>当使用shadow dom，<content>元素和select属性允许你把节点放到正确的地方，若其中有任何特殊元素，必须指明。</content></li>\n<li>若你的组件和微数据有关，需要写出微数据如何应用到你的组件上。</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<p><a id=\"more\"></a></p>\n<ul>\n<li><p>在shadow dom中不要包含太多的东西：虽然允许你在其中添加一些视觉外的很多标签，可是这并不是你想添加多少，就添加多少的理由。因为过多的元素会导致性能问题，另外，尽可能的在DOM中保持语义化。</p>\n</li>\n<li><p>不要创建过多的自定义组件：如果你有两个仅仅是表现形式不同的组件，这是你就应该考虑合二为一，或者自定义元素可以扩展，而不要重复创建相似功能的组件。</p>\n</li>\n<li><p>统一声明方式和重要的API:尽可能保持相似功能的紧密性，方便使用者改变其中任何一个地方都可以达到效果。</p>\n</li>\n<li><p>永远不要假设你运行的环境：如果你的组件很受欢迎，它将会运行在任何你想不到的环境，或者和你没有听过的组件混合使用，力争组件的独立性和灵活性：不要依赖外部的框架、结构。</p>\n</li>\n</ul>\n<h3 id=\"不要忘记\">不要忘记</h3>\n<p>一个成功的组件会被许多人应用在许多不同的环境中，这意味着遵循web的最佳实践开发变得更重要。</p>\n<ul>\n<li><p>可访问性：确保你的组件可通过ARIA 访问，特别是我们在创建新类型元素的时候这显得更重要。确保添加上 role=””属性。</p>\n</li>\n<li><p>性能：若你用一个回调来等待处理长时间的操作，记住不要过渡阻止主线程资源。误操作和逻辑性的循环会影响渲染性能，此时使用requestAnimationFrame来管理动画队列。应该清除像动画这种被暂停后占用的资源并且直到你把组件添加到DOM中才开启对应的操作。</p>\n</li>\n<li><p>脚本不是万能的：许多结构和样式需要js的支持，但是现在纯css就可以实现对应的效果。</p>\n</li>\n<li><p>响应式：把组件做成响应式的，因为你的用户会在你想不到的环境下使用组件。</p>\n</li>\n<li><p>测试：自定义标签，理想情况下需要单元测试来检测你的API.</p>\n</li>\n</ul>\n<p>原文：<a href=\"http://webcomponents.org/articles/web-components-best-practices/\" target=\"_blank\" rel=\"external\">Web Components Best Practices</a></p>\n","source":"_posts/Web-Components最佳实践.md","raw":"title: 'Web Components最佳实践'\r\ndate: 2014-07-06 07:39:29\r\ntags:\r\n---\r\n![best practices](http://img2.picbed.org/uploads/2014/07/web_components_best_practices.jpg)\r\n\r\nWeb Components是一组新的web平台功能，可以使开发者通过声明式、组合式的途径来构建应用。下面是一些给开发者的一些最佳实践建议:\r\n\r\n*\t命名空间：自定义元素应该用破折号隔开（例如：`<x-tabs>,<my-tabs>`)，破折号前面的字符才是有效的命名空间。你应该使其简短、唯一，尽可能不要覆盖其他人的前缀。如果你的组件已经有许多开发感兴趣，应该使组件的前缀小于三个字符。\r\n\r\n*\t尽可能模仿内建元素：你的组件对其他开发者来说就应该像内嵌组件一样。如果以后正式公开组件的API时,若组件的API感觉很另类，你是否会感觉到尴尬？\r\n\r\n*\t静默处理：组件应该想本地DOM元素，所以应该避免在普通元素交互时，出现js 错误，例如：你可以在ul中嵌套div,但它并不会按照你的想法渲染，可是它并不会抛出错误。\r\n\r\n*\t属性定义数据输入：使用属性来传递配置信息，用boolean属性来表示boolean值，例如：`<my-element selected>来代替<my-element seleted=\"true\">`.\r\n\r\n*\t事件定义数据输出：除了传输的数据信息巨大或者改变极其频繁之外，我们应该使用事件来传递组件里的信息。\r\n\r\n*\t引入依赖的文件：引入你组件的所依赖，不要担心<link rel=\"import\"...>冗余，只要设置合理的缓存头，它们只会在首次会被加载，使用http2.0可以减少多文件的消耗，或者在你发布app时，还可以合并和压缩它们到一个文件里面。\r\n\r\n*\t为组件写文档：方便其他人使用你的组件，组件有许多方法可作为它们的API,下面列出了一些容易忽略的地方：\r\n\t> 1. 通过实例标记可以简明的描述属性。\r\n\t>2. 若一个组件是设计嵌套在另一个中的，需要表明在其中如何使用。\r\n\t>3. 列出js方法和属性\r\n\t>4. 列出包含的事件\r\n\t>5. 当使用shadow dom，<content>元素和select属性允许你把节点放到正确的地方，若其中有任何特殊元素，必须指明。\r\n\t>6. 若你的组件和微数据有关，需要写出微数据如何应用到你的组件上。\r\n\t\r\n<!-- more -->\r\n*\t在shadow dom中不要包含太多的东西：虽然允许你在其中添加一些视觉外的很多标签，可是这并不是你想添加多少，就添加多少的理由。因为过多的元素会导致性能问题，另外，尽可能的在DOM中保持语义化。\r\n\r\n*\t不要创建过多的自定义组件：如果你有两个仅仅是表现形式不同的组件，这是你就应该考虑合二为一，或者自定义元素可以扩展，而不要重复创建相似功能的组件。\r\n\r\n*\t统一声明方式和重要的API:尽可能保持相似功能的紧密性，方便使用者改变其中任何一个地方都可以达到效果。\r\n\r\n*\t永远不要假设你运行的环境：如果你的组件很受欢迎，它将会运行在任何你想不到的环境，或者和你没有听过的组件混合使用，力争组件的独立性和灵活性：不要依赖外部的框架、结构。\r\n\r\n###不要忘记###\r\n\r\n一个成功的组件会被许多人应用在许多不同的环境中，这意味着遵循web的最佳实践开发变得更重要。\r\n\r\n*\t可访问性：确保你的组件可通过ARIA 访问，特别是我们在创建新类型元素的时候这显得更重要。确保添加上 role=\"\"属性。\r\n\r\n*\t性能：若你用一个回调来等待处理长时间的操作，记住不要过渡阻止主线程资源。误操作和逻辑性的循环会影响渲染性能，此时使用requestAnimationFrame来管理动画队列。应该清除像动画这种被暂停后占用的资源并且直到你把组件添加到DOM中才开启对应的操作。\r\n\r\n*\t脚本不是万能的：许多结构和样式需要js的支持，但是现在纯css就可以实现对应的效果。\r\n\r\n*\t响应式：把组件做成响应式的，因为你的用户会在你想不到的环境下使用组件。\r\n\r\n*\t测试：自定义标签，理想情况下需要单元测试来检测你的API.\r\n\r\n原文：[Web Components Best Practices](http://webcomponents.org/articles/web-components-best-practices/)","slug":"Web-Components最佳实践","updated":1415105931000,"excerpt":"<p><img src=\"http://img2.picbed.org/uploads/2014/07/web_components_best_practices.jpg\" alt=\"best practices\"></p>\n<p>Web Components是一组新的web平台功能，可以使开发者通过声明式、组合式的途径来构建应用。下面是一些给开发者的一些最佳实践建议:</p>\n<ul>\n<li><p>命名空间：自定义元素应该用破折号隔开（例如：<code>&lt;x-tabs&gt;,&lt;my-tabs&gt;</code>)，破折号前面的字符才是有效的命名空间。你应该使其简短、唯一，尽可能不要覆盖其他人的前缀。如果你的组件已经有许多开发感兴趣，应该使组件的前缀小于三个字符。</p>\n</li>\n<li><p>尽可能模仿内建元素：你的组件对其他开发者来说就应该像内嵌组件一样。如果以后正式公开组件的API时,若组件的API感觉很另类，你是否会感觉到尴尬？</p>\n</li>\n<li><p>静默处理：组件应该想本地DOM元素，所以应该避免在普通元素交互时，出现js 错误，例如：你可以在ul中嵌套div,但它并不会按照你的想法渲染，可是它并不会抛出错误。</p>\n</li>\n<li><p>属性定义数据输入：使用属性来传递配置信息，用boolean属性来表示boolean值，例如：<code>&lt;my-element selected&gt;来代替&lt;my-element seleted=&quot;true&quot;&gt;</code>.</p>\n</li>\n<li><p>事件定义数据输出：除了传输的数据信息巨大或者改变极其频繁之外，我们应该使用事件来传递组件里的信息。</p>\n</li>\n<li><p>引入依赖的文件：引入你组件的所依赖，不要担心<link rel=\"import\" ...=\"\">冗余，只要设置合理的缓存头，它们只会在首次会被加载，使用http2.0可以减少多文件的消耗，或者在你发布app时，还可以合并和压缩它们到一个文件里面。</p>\n</li>\n<li><p>为组件写文档：方便其他人使用你的组件，组件有许多方法可作为它们的API,下面列出了一些容易忽略的地方：</p>\n<blockquote>\n<ol>\n<li>通过实例标记可以简明的描述属性。</li>\n<li>若一个组件是设计嵌套在另一个中的，需要表明在其中如何使用。</li>\n<li>列出js方法和属性</li>\n<li>列出包含的事件</li>\n<li>当使用shadow dom，<content>元素和select属性允许你把节点放到正确的地方，若其中有任何特殊元素，必须指明。</content></li>\n<li>若你的组件和微数据有关，需要写出微数据如何应用到你的组件上。</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<p>","_id":"757unk8cx3gwkr41","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Web Components (一)","date":1404055576000,"tags":["pkbvfuxxgbv7jk6y"],"content":"<p>谷歌的I/O大会讲了Web Components的一些内容，然后自己就看了一些想文章。</p>\n<p>大致了解其中的一些内容，Web Components不是一个概念，而是五个概念的集合：</p>\n<ol>\n<li>Templates 定义一些惰性的代码块，但是使用的时候可激活。</li>\n<li>Decorators 增强或修改存在元素的表现。</li>\n<li>Custom Elements 允许开发者通过新的标签和新的脚本接口，来定义自己的元素。</li>\n<li>Shadow DOM 一个封装过的Dom,里面包含一些子节点（不可见）。</li>\n<li>Imports 定义上述元素如何被打包和加载的。</li>\n</ol>\n<p>每一个元素都是非常有用的，若把他们联合起来使用，可以使web开发者创造出代码复用性、可维护性更强的组件。</p>\n","source":"_posts/WebComponents.md","raw":"title: Web Components (一)\r\ndate: 2014-06-29 23:26:16\r\ntags: webcomponents\r\n---\r\n\r\n谷歌的I/O大会讲了Web Components的一些内容，然后自己就看了一些想文章。\r\n\r\n大致了解其中的一些内容，Web Components不是一个概念，而是五个概念的集合：\r\n\r\n1. Templates 定义一些惰性的代码块，但是使用的时候可激活。\r\n2. Decorators 增强或修改存在元素的表现。\r\n3. Custom Elements 允许开发者通过新的标签和新的脚本接口，来定义自己的元素。\r\n4. Shadow DOM 一个封装过的Dom,里面包含一些子节点（不可见）。\r\n5. Imports 定义上述元素如何被打包和加载的。\r\n\r\n每一个元素都是非常有用的，若把他们联合起来使用，可以使web开发者创造出代码复用性、可维护性更强的组件。\r\n","slug":"WebComponents","updated":1415105931000,"excerpt":"","_id":"ynh61cwieeb530no","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"WebMobile图标定义属性","date":1405259669000,"tags":[],"content":"<p>苹果safari浏览器定义的了<strong>apple-touch-icon-precomposed</strong>和<strong>apple-touch-icon</strong>是为了苹果移动设备（ipod、ipad、iphone）对移动网站进行收藏（“添加到桌面图标”）时增加的图标定义属性。</p>\n<p>此两种属性是有区别的：</p>\n<ul>\n<li>使用apple-touch-icon属性为“增加高光光亮的图标”；</li>\n<li>使用apple-touch-icon-precomposed属性为“设计原图图标”；</li>\n</ul>\n<p><a href=\"http://blog.sina.com.cn/s/blog_6d48e77101015krn.html\" target=\"_blank\" rel=\"external\">参考1</a><br><a href=\"http://www.iptu.net/index.php/archives/2955.iptu\" target=\"_blank\" rel=\"external\">参考2</a></p>\n","source":"_posts/WebMobile图标定义属性.md","raw":"title: WebMobile图标定义属性\ndate: 2014-07-13 21:54:29\ntags:\n---\n\n苹果safari浏览器定义的了__apple-touch-icon-precomposed__和__apple-touch-icon__是为了苹果移动设备（ipod、ipad、iphone）对移动网站进行收藏（“添加到桌面图标”）时增加的图标定义属性。\n\n此两种属性是有区别的：\n\n*\t使用apple-touch-icon属性为“增加高光光亮的图标”；\n*\t使用apple-touch-icon-precomposed属性为“设计原图图标”；\n\n[参考1](http://blog.sina.com.cn/s/blog_6d48e77101015krn.html)\n[参考2](http://www.iptu.net/index.php/archives/2955.iptu)\n","slug":"WebMobile图标定义属性","updated":1415105931000,"excerpt":"","_id":"uinnbkf3d8yrd9tg","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"chrome查看密码","date":1407329576000,"tags":[],"content":"<p>chrome可以帮你找回“密码”，当然这是有前提的：<strong>你必须在chrome里面保存了登录某网站的密码。</strong></p>\n<p>我拿自己的亚马逊帐号为例：</p>\n<h3 id=\"登录页面：\">登录页面：</h3>\n<p><img src=\"http://img3.tuchuang.org/uploads/2014/08/test.png\" alt=\"img\"></p>\n<p>此时密码是点点。</p>\n<h3 id=\"对应的HTMl:\">对应的HTMl:</h3>\n<p><img src=\"http://img4.picbed.org/uploads/2014/08/sdfasd.png\" alt=\"img\"></p>\n<h3 id=\"见证奇迹的时候到了，更改input的类型：\">见证奇迹的时候到了，更改input的类型：</h3>\n<p><img src=\"http://img5.tuchuang.org/uploads/2014/08/asdfasdf.png\" alt=\"img\"></p>\n<h3 id=\"然后再看看登录页面：\">然后再看看登录页面：</h3>\n<p><img src=\"http://img2.picbed.org/uploads/2014/08/asdfasdfa.png\" alt=\"img\"></p>\n<p>密码是不是显示出来了！</p>\n","source":"_posts/chrome查看密码.md","raw":"title: chrome查看密码\ndate: 2014-08-06 20:52:56\ntags:\n---\nchrome可以帮你找回“密码”，当然这是有前提的：__你必须在chrome里面保存了登录某网站的密码。__\n\n我拿自己的亚马逊帐号为例：\n\n###登录页面：###\n\n![img](http://img3.tuchuang.org/uploads/2014/08/test.png)\n\n此时密码是点点。\n\n###对应的HTMl:###\n\n![img](http://img4.picbed.org/uploads/2014/08/sdfasd.png)\n\n###见证奇迹的时候到了，更改input的类型：###\n\n![img](http://img5.tuchuang.org/uploads/2014/08/asdfasdf.png)\n\n###然后再看看登录页面：###\n\n![img](http://img2.picbed.org/uploads/2014/08/asdfasdfa.png)\n\n密码是不是显示出来了！","slug":"chrome查看密码","updated":1415105931000,"excerpt":"","_id":"kgli0ng5gofgfbky","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"defer 和 async 的区别","date":1407653966000,"tags":[],"content":"<p>加载javascript一直是页面优化的重头戏，defer和async又可以帮助一些：</p>\n<h3 id=\"async:\">async:</h3>\n<blockquote>\n<p>Set this Boolean attribute to indicate that the browser should, if possible, execute the script asynchronously. It has no effect on inline scripts (i.e., scripts that don’t have the src attribute).</p>\n</blockquote>\n<p>大意：</p>\n<blockquote>\n<p>设置此Boolean属性就是让浏览器异步的执行此脚本，它对内敛脚本无效（就是没有src属性的脚本）</p>\n</blockquote>\n<h3 id=\"defer:\">defer:</h3>\n<blockquote>\n<p>This Boolean attribute is set to indicate to a browser that the script is meant to be executed after the document has been parsed. </p>\n</blockquote>\n<p>大意：</p>\n<blockquote>\n<p>设置此Boolean属性就是告诉浏览器在DOM节点解析完毕之前执行。</p>\n</blockquote>\n<p>文档说的很少，其实还有好多东西，这里直接记录其异同：</p>\n<p><strong>同：</strong></p>\n<ul>\n<li>不阻塞页面的渲染</li>\n<li>只能应用在通过src属性连接的javascript</li>\n<li>此脚本内部不能有document.write</li>\n<li>加载完成后可以触发onload事件</li>\n</ul>\n<p><strong>异：</strong></p>\n<ul>\n<li>出现的版本不同defer属于HTML4,async属于HTML5</li>\n<li>各浏览器支持程度不同（IE4开始支持defer）</li>\n<li>执行时机不同（defer在页面渲染完成之后执行，async在加载完成之后就执行）</li>\n<li>执行的顺序不同（defer会严格按照页面出现的顺序执行，async在能执行的时候就会执行，有可能会顺序颠倒）</li>\n</ul>\n<p>参考图：</p>\n<p><img src=\"http://img2.picbed.org/uploads/2014/08/execution2.jpg\" alt=\"加载于执行\"></p>\n<p>注：</p>\n<p><strong>正是由于async的执行顺序不可控，在具有依赖的脚本加载时不可以使用。对于没有依赖的代码可以使用比如统计代码、或者一个页面的单一脚本等</strong></p>\n<p>参考：</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script</a></p>\n<p><a href=\"http://stackoverflow.com/questions/10808109/script-tag-async-defer\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/10808109/script-tag-async-defer</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Mozilla_event_reference/DOMContentLoaded_(event\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Mozilla_event_reference/DOMContentLoaded_(event</a>)</p>\n<p><a href=\"http://ued.ctrip.com/blog/?p=3121\" target=\"_blank\" rel=\"external\">http://ued.ctrip.com/blog/?p=3121</a></p>\n","source":"_posts/defer-和-async-的区别.md","raw":"title: 'defer 和 async 的区别'\ndate: 2014-08-10 14:59:26\ntags:\n---\n加载javascript一直是页面优化的重头戏，defer和async又可以帮助一些：\n\n###async:###\n\n>Set this Boolean attribute to indicate that the browser should, if possible, execute the script asynchronously. It has no effect on inline scripts (i.e., scripts that don't have the src attribute).\n\n大意：\n\n>设置此Boolean属性就是让浏览器异步的执行此脚本，它对内敛脚本无效（就是没有src属性的脚本）\n\n###defer:###\n\n>This Boolean attribute is set to indicate to a browser that the script is meant to be executed after the document has been parsed. \n\n大意：\n\n>设置此Boolean属性就是告诉浏览器在DOM节点解析完毕之前执行。\n\n文档说的很少，其实还有好多东西，这里直接记录其异同：\n\n__同：__\n\n* 不阻塞页面的渲染\n* 只能应用在通过src属性连接的javascript\n* 此脚本内部不能有document.write\n* 加载完成后可以触发onload事件\n\n__异：__\n\n* 出现的版本不同defer属于HTML4,async属于HTML5\n* 各浏览器支持程度不同（IE4开始支持defer）\n* 执行时机不同（defer在页面渲染完成之后执行，async在加载完成之后就执行）\n* 执行的顺序不同（defer会严格按照页面出现的顺序执行，async在能执行的时候就会执行，有可能会顺序颠倒）\n\n参考图：\n\n![加载于执行](http://img2.picbed.org/uploads/2014/08/execution2.jpg)\n\n注：\n\n__正是由于async的执行顺序不可控，在具有依赖的脚本加载时不可以使用。对于没有依赖的代码可以使用比如统计代码、或者一个页面的单一脚本等__\n\n参考：\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script\n\nhttp://stackoverflow.com/questions/10808109/script-tag-async-defer\n\nhttps://developer.mozilla.org/zh-CN/docs/Mozilla_event_reference/DOMContentLoaded_(event)\n\nhttp://ued.ctrip.com/blog/?p=3121\n","slug":"defer-和-async-的区别","updated":1415105931000,"excerpt":"","_id":"h8ya8urr9g4i2bv0","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"weinre远程调试web mobile","date":1405845247000,"tags":[],"content":"<p><!-- ![weinre](http://img1.tuchuang.org/uploads/2014/07/weinre_demo.jpg) --></p>\n<h3 id=\"什么是weinre?\">什么是weinre?</h3>\n<blockquote>\n<p>weinre is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it’s designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone.</p>\n</blockquote>\n<p>大体意思：</p>\n<blockquote>\n<p>weinre是网页的调试工具，就像FireFox里面的firebug和webkit内核的开发者工具，唯一的区别它是为远程调试设计的，特点是它可以调试手机上的网页。</p>\n</blockquote>\n<h3 id=\"如何使用？\">如何使用？</h3>\n<ul>\n<li>获取Weinre</li>\n</ul>\n<p>在任何支持Node.js环境的系统下，通过包管理器（NPM）即可安装Weinre</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> -g weinre</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>开启Weinre调试</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">weinre --boundHost -<span class=\"literal\">all</span>-</div></pre></td></tr></table></figure>\n\n<p><a id=\"more\"></a></p>\n<ul>\n<li><p>通过PC浏览器（webkit）打开调试页面</p>\n<p><a href=\"http://localhost:8080\" target=\"_blank\" rel=\"external\">http://localhost:8080</a></p>\n</li>\n</ul>\n<p><img src=\"http://img1.tuchuang.org/uploads/2014/07/20131121114239.png\" alt=\"debug\"></p>\n<ul>\n<li><p>在调试页面添加脚本</p>\n<script src=\"http://localhost[Your IP]:8080/target/target-script-min.js#anonymous\"></script>\n\n</li>\n</ul>\n<p><strong>注意：这里的localhost要改为自己本机的ip地址</strong></p>\n<ul>\n<li>手机访问你要调试的页面，在debug页面（上图页面的第一个连接）看是否通信成功</li>\n</ul>\n<p><img src=\"http://img4.picbed.org/uploads/2014/07/20131121115208.png\" alt=\"debug\"></p>\n<p>看targets下面有连接基本就对了。</p>\n<ul>\n<li>最后这就像chrome的debug一样了</li>\n</ul>\n<p><a href=\"http://people.apache.org/~pmuellr/weinre-docs/latest/Home.html\" target=\"_blank\" rel=\"external\">weinre</a></p>\n<p><a href=\"http://dearb.me/archive/2013-11-21/web-inspector-remote-debugger-weinre/\" target=\"_blank\" rel=\"external\">参考</a></p>\n<p><a href=\"https://www.youtube.com/results?search_query=weinre\" target=\"_blank\" rel=\"external\">youtube</a></p>\n","source":"_posts/weinre远程调试web-mobile.md","raw":"title: 'weinre远程调试web mobile'\ndate: 2014-07-20 16:34:07\ntags:\n---\n<!-- ![weinre](http://img1.tuchuang.org/uploads/2014/07/weinre_demo.jpg) -->\n###什么是weinre?###\n\n>weinre is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it's designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone.\n\n大体意思：\n\n>weinre是网页的调试工具，就像FireFox里面的firebug和webkit内核的开发者工具，唯一的区别它是为远程调试设计的，特点是它可以调试手机上的网页。\n\n###如何使用？###\n\n*\t获取Weinre\n\n在任何支持Node.js环境的系统下，通过包管理器（NPM）即可安装Weinre\n```\n npm install -g weinre\n```\n\n*\t开启Weinre调试\n\n```\nweinre --boundHost -all-\n```\n<!--more-->\n*\t通过PC浏览器（webkit）打开调试页面\n\n\thttp://localhost:8080\n\n![debug](http://img1.tuchuang.org/uploads/2014/07/20131121114239.png)\n\n\n*\t在调试页面添加脚本\n\n\t<script src=\"http://localhost[Your IP]:8080/target/target-script-min.js#anonymous\"></script>\n\n__注意：这里的localhost要改为自己本机的ip地址__\n\n\n*\t手机访问你要调试的页面，在debug页面（上图页面的第一个连接）看是否通信成功\n\n![debug](http://img4.picbed.org/uploads/2014/07/20131121115208.png)\n\n看targets下面有连接基本就对了。\n\n\n*\t最后这就像chrome的debug一样了\n\n[weinre](http://people.apache.org/~pmuellr/weinre-docs/latest/Home.html)\n\n[参考](http://dearb.me/archive/2013-11-21/web-inspector-remote-debugger-weinre/)\n\n[youtube](https://www.youtube.com/results?search_query=weinre)","slug":"weinre远程调试web-mobile","updated":1415105931000,"excerpt":"<p><!-- ![weinre](http://img1.tuchuang.org/uploads/2014/07/weinre_demo.jpg) --></p>\n<h3 id=\"什么是weinre?\">什么是weinre?</h3>\n<blockquote>\n<p>weinre is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it’s designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone.</p>\n</blockquote>\n<p>大体意思：</p>\n<blockquote>\n<p>weinre是网页的调试工具，就像FireFox里面的firebug和webkit内核的开发者工具，唯一的区别它是为远程调试设计的，特点是它可以调试手机上的网页。</p>\n</blockquote>\n<h3 id=\"如何使用？\">如何使用？</h3>\n<ul>\n<li>获取Weinre</li>\n</ul>\n<p>在任何支持Node.js环境的系统下，通过包管理器（NPM）即可安装Weinre</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> -g weinre</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>开启Weinre调试</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">weinre --boundHost -<span class=\"literal\">all</span>-</div></pre></td></tr></table></figure>\n\n<p>","_id":"dzf68b5x5ap8230a","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"window 查看端口占用","date":1408696706000,"tags":[],"content":"<p>查看端口命令：</p>\n<pre><code><span class=\"keyword\">C</span>:\\netstat -aon|findstr <span class=\"number\">8080</span>\n</code></pre><p>结果：</p>\n<pre><code><span class=\"title\">TCP</span>  <span class=\"number\">127.0.0.1:80</span>   <span class=\"number\">0.0.0.0:0</span>     LISTENING  <span class=\"number\">2448</span>\n</code></pre><p>端口被进程号为2448的进程占用，继续执行下面命令：</p>\n<pre><code><span class=\"keyword\">C</span>:\\tasklist|findstr <span class=\"number\">2448</span>\n</code></pre><p>结果：</p>\n<pre><code>thread.<span class=\"keyword\">exe</span>       <span class=\"number\">2016</span> Console      <span class=\"number\">0</span>  <span class=\"number\">16</span>,<span class=\"number\">064</span> K\n</code></pre><p>很清楚，thread占用了你的端口,Kill it</p>\n<p>命令：</p>\n<pre><code><span class=\"title\">taskkill</span> -F -PID <span class=\"number\">2448</span>\n</code></pre>","source":"_posts/window-查看端口占用.md","raw":"title: 'window 查看端口占用'\ndate: 2014-08-22 16:38:26\ntags:\n---\n查看端口命令：\n\n\tC:\\netstat -aon|findstr 8080\n\n结果：\n\n\tTCP  127.0.0.1:80   0.0.0.0:0     LISTENING  2448\n\n端口被进程号为2448的进程占用，继续执行下面命令：\n\n\tC:\\tasklist|findstr 2448\n\n结果：\n\n\tthread.exe       2016 Console      0  16,064 K\n\n很清楚，thread占用了你的端口,Kill it\n\n命令：\n\n\ttaskkill -F -PID 2448","slug":"window-查看端口占用","updated":1415105931000,"excerpt":"","_id":"qyzh26yz18d13221","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"为什么要学习？","date":1403371072000,"tags":[],"content":"<p>当你的才华撑不起你的野心时，就应该静下心来学习。</p>\n","source":"_posts/为什么要写博客？.md","raw":"title: 为什么要学习？\r\ndate: 2014-06-22 01:17:52\r\ntags:\r\n---\r\n当你的才华撑不起你的野心时，就应该静下心来学习。","slug":"为什么要写博客？","updated":1415105931000,"excerpt":"","_id":"07ry1d22jr6vq9dv","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"你不知道的‘是非’","date":1412863746000,"tags":[],"content":"<p>上一篇文章<a href=\"http://zhuxinyong.com/2014/09/27/JavaScript%E6%8A%80%E5%B7%A7%E6%8F%AD%E7%A7%98/\" target=\"_blank\" rel=\"external\">JavaScript技巧揭秘</a>提到short-circuit evaluation。</p>\n<p>文章提到 || 为函数提供默认参数，此种方法应用很广泛。一直认为 <strong>&amp;&amp;</strong> 和 <strong>||</strong> 没有什么特别的也没有多加注意。最近看了一些关于她俩的文章和讨论发现很值得详细记录一下。</p>\n<p>以前认为 &amp;&amp; 和 || 返回的是Boolean值。</p>\n<p>例如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"operator\">a</span> && b){</div><div class=\"line\"><span class=\"comment\"> //do sth...</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>此时你应该认为 <strong>a &amp;&amp; b</strong> 返回的是Boolean值。看个实例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span> && <span class=\"string\">'xx'</span>){</div><div class=\"line\"> //<span class=\"keyword\">do</span> sth...</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>上面的例子会执行if里面的do sth，但是 <strong>true &amp;&amp; ‘xx’</strong> 返回的是 ‘xx’,所以 &amp;&amp; 并不是简单的返回Boolean。同样 || 也不是简单的返回Boolean。</p>\n<p>为函数提供默认值我们经常会这样：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fun</span><span class=\"params\">(name)</span></span>{</div><div class=\"line\">\t<span class=\"keyword\">var</span> name = name || <span class=\"string\">'China'</span>;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name + <span class=\"string\">'!'</span>);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>当传入Fun里面的name的值能转化为false时，程序就提供一个默认值‘China’。那么在Js里什么值能转换为false：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span>, <span class=\"string\">''</span>, <span class=\"string\">\"\"</span>, <span class=\"literal\">null</span> ,<span class=\"literal\">undefined</span> ,<span class=\"literal\">NaN</span></div></pre></td></tr></table></figure>\n\n<p>其余的值都可以转为true,包括<strong>-1,-2</strong>这些负数。</p>\n<p>那么现在来看几个例子（感觉比较有意思）：</p>\n<h4 id=\"&amp;&amp;运算：\">&amp;&amp;运算：</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">true</span> && <span class=\"literal\">false</span> <span class=\"regexp\">//</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"literal\">false</span> && <span class=\"literal\">false</span> <span class=\"regexp\">//</span><span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"string\">\"\"</span> && <span class=\"string\">\"one\"</span> <span class=\"regexp\">//</span><span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"string\">\"one\"</span> && <span class=\"string\">\"\"</span> <span class=\"regexp\">//</span><span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"string\">\"one\"</span> && <span class=\"string\">\"two\"</span> <span class=\"regexp\">//</span><span class=\"keyword\">return</span> <span class=\"string\">\"two\"</span></div><div class=\"line\"><span class=\"literal\">null</span> && <span class=\"number\">10</span> //<span class=\"keyword\">return</span> <span class=\"literal\">null</span></div><div class=\"line\"><span class=\"number\">10</span> && <span class=\"literal\">null</span> <span class=\"regexp\">//</span><span class=\"keyword\">return</span> <span class=\"literal\">null</span></div></pre></td></tr></table></figure>\n\n<h4 id=\"||_运算：\">|| 运算：</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"one\"</span> || <span class=\"string\">\"two\"</span> <span class=\"comment\">// \"one\"</span></div><div class=\"line\"><span class=\"number\">0</span> || <span class=\"string\">\"one\"</span>     <span class=\"comment\">// \"one\"</span></div><div class=\"line\"><span class=\"string\">\"\"</span> || <span class=\"number\">0</span>        <span class=\"comment\">// 0</span></div><div class=\"line\"><span class=\"literal\">null</span> || <span class=\"number\">10</span>     <span class=\"comment\">// 10</span></div><div class=\"line\"><span class=\"number\">10</span> || <span class=\"literal\">null</span>     <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure>\n\n<p>这里还有几个例子：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/quman/1/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/pabem/1/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>\n<p>&amp;&amp; 和 || 其实返回的是表达式执行的结果,如上的say()和Fun()方法。</p>\n<p>说了这么多尝试总结一下：</p>\n<hr>\n<h4 id=\"&amp;&amp;：\">&amp;&amp;：</h4>\n<ul>\n<li><p>当左右两边都为true时，结果为：true；</p>\n</li>\n<li><p>当左侧的表达式转为true时，结果为：右侧表达式执行的结果；</p>\n</li>\n<li><p>当左侧的表达式转为false时，结果为：左侧表达式执行的结果；</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"||：\">||：</h4>\n<ul>\n<li><p>当左右两边都为false时，结果为：false；</p>\n</li>\n<li><p>当左侧的表达式转为true时，结果为：左侧表达式执行的结果；</p>\n</li>\n<li><p>当左侧的表达式转为false时，结果为：右侧表达式执行的结果；</p>\n</li>\n</ul>\n<p>参考：</p>\n<ol>\n<li><p><a href=\"http://www.codecademy.com/forum_questions/502b728cdadc53000202b956\" target=\"_blank\" rel=\"external\">http://www.codecademy.com/forum_questions/502b728cdadc53000202b956</a></p>\n</li>\n<li><p><a href=\"http://www.grauw.nl/blog/entry/510\" target=\"_blank\" rel=\"external\">http://www.grauw.nl/blog/entry/510</a></p>\n</li>\n<li><p><a href=\"http://learn.jquery.com/javascript-101/operators/\" target=\"_blank\" rel=\"external\">http://learn.jquery.com/javascript-101/operators/</a></p>\n</li>\n</ol>\n","source":"_posts/你不知道的“是非”.md","raw":"title: \"你不知道的‘是非’\"\ndate: 2014-10-09 22:09:06\ntags:\n---\n上一篇文章[JavaScript技巧揭秘](http://zhuxinyong.com/2014/09/27/JavaScript%E6%8A%80%E5%B7%A7%E6%8F%AD%E7%A7%98/)提到short-circuit evaluation。\n\n文章提到 || 为函数提供默认参数，此种方法应用很广泛。一直认为 __&&__ 和 __||__ 没有什么特别的也没有多加注意。最近看了一些关于她俩的文章和讨论发现很值得详细记录一下。\n\n以前认为 && 和 || 返回的是Boolean值。\n\n例如：\n\n```\nif(a && b){\n //do sth...\n}\n```\n\n此时你应该认为 __a && b__ 返回的是Boolean值。看个实例：\n\n```\nif(true && 'xx'){\n //do sth...\n}\n```\n上面的例子会执行if里面的do sth，但是 __true && 'xx'__ 返回的是 'xx',所以 && 并不是简单的返回Boolean。同样 || 也不是简单的返回Boolean。\n\n为函数提供默认值我们经常会这样：\n\n```\nfunction Fun(name){\n\tvar name = name || 'China';\n\tconsole.log('Hello ' + name + '!');\n}\n```\n当传入Fun里面的name的值能转化为false时，程序就提供一个默认值‘China’。那么在Js里什么值能转换为false：\n\n```\n0, '', \"\", null ,undefined ,NaN\n```\n\n其余的值都可以转为true,包括__-1,-2__这些负数。\n\n那么现在来看几个例子（感觉比较有意思）：\n\n#### &&运算： ####\n\n``` \ntrue && false // return false\nfalse && false //return false\n\"\" && \"one\" //return \"\"\n\"one\" && \"\" //return \"\"\n\"one\" && \"two\" //return \"two\"\nnull && 10 //return null\n10 && null //return null\n```\n\n#### || 运算：####\n\n```\n\"one\" || \"two\" // \"one\"\n0 || \"one\"     // \"one\"\n\"\" || 0        // 0\nnull || 10     // 10\n10 || null     // 10\n```\n\n这里还有几个例子：\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/quman/1/embed?js,console\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script>\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/pabem/1/embed?js,console\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script>\n\n&& 和 || 其实返回的是表达式执行的结果,如上的say()和Fun()方法。\n\n说了这么多尝试总结一下：\n\n----------------------\n\n#### &&： ####\n\n* 当左右两边都为true时，结果为：true；\n\n* 当左侧的表达式转为true时，结果为：右侧表达式执行的结果；\n\n* 当左侧的表达式转为false时，结果为：左侧表达式执行的结果；\n\n----------------------\n\n#### ||：####\n\n* 当左右两边都为false时，结果为：false；\n\n* 当左侧的表达式转为true时，结果为：左侧表达式执行的结果；\n\n* 当左侧的表达式转为false时，结果为：右侧表达式执行的结果；\n\n\n\n参考：\n\n1. http://www.codecademy.com/forum_questions/502b728cdadc53000202b956\n\n2. http://www.grauw.nl/blog/entry/510\n\n3. http://learn.jquery.com/javascript-101/operators/\n\n\n\n\n\n\n\n","slug":"你不知道的“是非”","updated":1415105931000,"excerpt":"","_id":"p2fbemg6grh8ob4x","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"使用Express4和Node搭建RESTful API","date":1414989993000,"categories":[],"tags":["bwdm06b4z4b33qo0"],"content":"<p>几天前随着Express 4.0的发布，我们许多Node项目的路由需要跟着更改。伴随Express Router的变化，我们在设置应用路由时更加灵活。</p>\n<p>今天我们将使用Node,Express 4.0和它的路由来创建RESTful API，同时使用Mongoose与MongoDB交互。在Chrome中使用Postman来测试我们的API。</p>\n<p>接下来看看我们要创建的API以及它的用途。</p>\n<h3 id=\"我们的程序\">我们的程序</h3>\n<p>我们将要创建的API:</p>\n<ul>\n<li>处理CRUD</li>\n<li>标准的URL(<code>http://example.com/api/bears</code>和<code>http://example.com/api/bears/:bear_id</code>)</li>\n<li>使用合适的HTTP来搭配RESTful(GET,POST,PUT和DELETE)</li>\n<li>返回JSON数据</li>\n<li>控制台打印出所有的请求</li>\n</ul>\n<p>这些都是严格遵循<a href=\"http://scotch.io/bar-talk/designing-a-restful-web-api\" target=\"_blank\" rel=\"external\">RESTful APIS</a>的规范的，可以灵活的转变为任何你想创建的程序（用户，超级英雄，啤酒等）</p>\n<p>开始之前要确保你安装了Node环境然后我们才能开始！</p>\n<h3 id=\"启程\">启程</h3>\n<p>我们先整理一下创建API所需要的文件，我们需要定义Node packages，使用Express搭建服务、路由和模型，最后，测试我们的API。</p>\n<p>下面是我们的目录结构，我们需要很多文件同时为了演示我们尽可能的精简。当真的要做一个产品或者一个大的应用时，你应该拥有一个更好的结构（比如剥离routes到一个单独的文件里）。</p>\n<pre><code>-<span class=\"ruby\"> app/\n</span>    -<span class=\"ruby\">---- models/\n</span>    -<span class=\"ruby\">--------- bear.js     /<span class=\"regexp\">/ our bear model\n</span></span>    -<span class=\"ruby\"> node_modules/     <span class=\"regexp\">//</span> created by npm. holds our dependencies/packages\n</span>    -<span class=\"ruby\"> package.json         /<span class=\"regexp\">/ define all our node app and dependencies\n</span></span>    -<span class=\"ruby\"> server.js         /<span class=\"regexp\">/ configure our application and create routes</span></span>\n</code></pre><h3 id=\"声明Node依赖包\">声明Node依赖包</h3>\n<p>我们所有的Node项目都会在<code>package.json</code>里面定义依赖的包。先创建一个包含下面内容的文件：</p>\n<pre><code><span class=\"comment\">// package.json</span>\n{\n    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"node-api\"</span>,\n    <span class=\"string\">\"main\"</span>: <span class=\"string\">\"server.js\"</span>,\n    <span class=\"string\">\"dependencies\"</span>: {\n        <span class=\"string\">\"express\"</span>: <span class=\"string\">\"~4.0.0\"</span>,\n        <span class=\"string\">\"mongoose\"</span>: <span class=\"string\">\"~3.6.13\"</span>,\n        <span class=\"string\">\"body-parser\"</span>: <span class=\"string\">\"~1.0.1\"</span>\n    }\n}\n</code></pre><p><strong>这些包的作用是啥？</strong> <code>express</code>是Node的Web框架，<code>mongoose</code>是和MongoDB数据库通信的对象关系映射，<code>body-parser</code>使我们能在HTTP请求中获得参数信息，方便我们做一些事情。</p>\n<h3 id=\"安装Node包\">安装Node包</h3>\n<p>这或许是最简单的一步，在你的项目根目录打开终端输入：</p>\n<pre><code><span class=\"variable\">$ </span>npm install\n</code></pre><p>npm会拉去所有的依赖包到<code>node_module</code>中。</p>\n<p><code>npm</code>是Node的包管理工具，现在我们有了所有依赖的包，可以开始创建API了。因为<code>server.js</code>是我们在package.json中声明的程序入口，所以我们找到<code>server.js</code>文件（没有的创建）来配置程序。</p>\n<h3 id=\"搭建我们的服务器\">搭建我们的服务器</h3>\n<p>Node启动程序时会检查一些配置信息。</p>\n<p>我们会保持代码的简洁以及良好的注释，清晰的了解我们每一步完成了什么。</p>\n<pre><code><span class=\"comment\">// server.js</span>\n\n<span class=\"comment\">// BASE SETUP</span>\n<span class=\"comment\">// =============================================================================</span>\n\n<span class=\"comment\">// call the packages we need</span>\n<span class=\"keyword\">var</span> express    = <span class=\"keyword\">require</span>(<span class=\"string\">'express'</span>);         <span class=\"comment\">// call express</span>\n<span class=\"keyword\">var</span> app        = express();                 <span class=\"comment\">// define our app using express</span>\n<span class=\"keyword\">var</span> bodyParser = <span class=\"keyword\">require</span>(<span class=\"string\">'body-parser'</span>);\n\n<span class=\"comment\">// configure app to use bodyParser()</span>\n<span class=\"comment\">// this will let us get the data from a POST</span>\napp.<span class=\"keyword\">use</span>(bodyParser.urlencoded({ extended: <span class=\"keyword\">true</span> }));\napp.<span class=\"keyword\">use</span>(bodyParser.json());\n\n<span class=\"keyword\">var</span> port = process.env.PORT || <span class=\"number\">8080</span>;         <span class=\"comment\">// set our port</span>\n\n<span class=\"comment\">// ROUTES FOR OUR API</span>\n<span class=\"comment\">// =============================================================================</span>\n<span class=\"keyword\">var</span> router = express.Router();                 <span class=\"comment\">// get an instance of the express Router</span>\n\n<span class=\"comment\">// test route to make sure everything is working (accessed at GET http://localhost:8080/api)</span>\nrouter.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span> </span>{\n    res.json({ message: <span class=\"string\">'hooray! welcome to our api!'</span> });    \n});\n\n<span class=\"comment\">// more routes for our API will happen here</span>\n\n<span class=\"comment\">// REGISTER OUR ROUTES -------------------------------</span>\n<span class=\"comment\">// all of our routes will be prefixed with /api</span>\napp.<span class=\"keyword\">use</span>(<span class=\"string\">'/api'</span>, router);\n\n<span class=\"comment\">// START THE SERVER</span>\n<span class=\"comment\">// =============================================================================</span>\napp.listen(port);\nconsole.log(<span class=\"string\">'Magic happens on port '</span> + port);\n</code></pre><p>哇哦，我们做了许多事，但都很简单。接下来我们挨个看看：</p>\n<ul>\n<li><p><strong>基础设置</strong> 在我们的设置中包含使用express初始化应用，通过bodyParser来轻松获取请求头信息以及设置应用的端口。</p>\n</li>\n<li><p><strong>路由配置</strong> 我们使用Express的Router来定义应用的路由。</p>\n</li>\n<li><p><strong>启动服务</strong> 我们会在先前定义的端口启动应用，然后就可以运行和测试它。</p>\n</li>\n</ul>\n<h3 id=\"开启服务并测试\">开启服务并测试</h3>\n<p>确保所有的工作已经就绪，接下来我们启动应用并在先前定义的路由上发一个请求确保能得到一个响应。</p>\n<p>使用下面的命令启动服务：</p>\n<pre><code><span class=\"variable\">$ </span>node server.js\n</code></pre><p>你将会看到如下的界面：</p>\n<p><img src=\"http://img5.picbed.org/uploads/2014/11/node_api_start_server.png\" alt=\"img\"></p>\n<p>看到程序已经启动，接着来测试一下。</p>\n<h3 id=\"使用Postman测试我们的API\">使用Postman测试我们的API</h3>\n<p>Postman会帮助我们测试API，它基本就是在我们填写的路径上发送HTTP请求。我们甚至可以传递参数和权限（在这个应用中我们暂且不需要）。</p>\n<p>打开Postman看看如何使用：</p>\n<p><img src=\"http://img4.tuchuang.org/uploads/2014/11/postman_rest_client_node_api.png\" alt=\"img\"></p>\n<p>你所需要做的就是：<strong>填写目的url，选择一个http方法最后发送请求</strong>，够简单吧？</p>\n<p>接下来就是期盼已久的时刻，在URL一栏中输入<strong><a href=\"http://localhost:8080/api\" target=\"_blank\" rel=\"external\">http://localhost:8080/api</a></strong>，由于我们仅从服务器获得数据，所以我们选择<strong>GET</strong>方法，接着点击发送。</p>\n<p><img src=\"http://img3.tuchuang.org/uploads/2014/11/node_api_postman_test.png\" alt=\"post man\"></p>\n<p>不错，我们得到了预期的结果，现在我们可以为请求服务。接下来连上数据库方便我们执行CRUD操作。</p>\n<h3 id=\"数据库和Beaer模型\">数据库和Beaer模型</h3>\n<p>我们会使这部分简短留有足够的时间在创建API路由上。我们所需要做的就是创建MongoDB数据库以及使程序和它相连。为了简化和数据库的操作我们同样需要mongoose模型。</p>\n<p><strong>创建数据库和链接</strong></p>\n<p>我们使用Modulus提供的数据库，你在上面可以创建自己的数据库以及可以在本地使用，或者使用Mongolab，所有你所需要的就是一个链接，就像下面那样就你的程序就可以连接。</p>\n<p>一旦创建好数据库以及有一个可以连接的地址，接着在<strong>server.js</strong>里面添加下面两行：</p>\n<pre><code>// server.js\n\n// BASE SETUP\n// =============================================================================\n\n<span class=\"keyword\">...</span>\n\nvar mongoose   = <span class=\"keyword\">require</span>(<span class=\"string\">'mongoose'</span>);\nmongoose.connect(<span class=\"string\">'mongodb://node:node@novus.modulusmongo.net:27017/Iganiq8o'</span>); // connect to our database\n\n<span class=\"keyword\">...</span>\n</code></pre><p>现在我们已经获取mongoose的包同时连上架设在远程Modulus的数据库。接下来就需要创建bears的模型。</p>\n<p><strong>Bear Moder app/models/bear.js</strong></p>\n<p>因为创建模型不是本教程的核心，所以我们只一个带有名字字段的模型。接下来创建并添加如下代码：</p>\n<pre><code><span class=\"comment\">// app/models/bear.js</span>\n\n<span class=\"keyword\">var</span> mongoose     = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);\n<span class=\"keyword\">var</span> Schema       = mongoose.Schema;\n\n<span class=\"keyword\">var</span> BearSchema   = <span class=\"keyword\">new</span> Schema({\n    name: <span class=\"built_in\">String</span>\n});\n\n<span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">'Bear'</span>, BearSchema);\n</code></pre><p>创建完上面的文件，接着就要在我们的server.js中引入：</p>\n<pre><code>// server.js\n\n// BASE SETUP\n// =============================================================================\n\n<span class=\"keyword\">...</span>\n\nvar Bear     = <span class=\"keyword\">require</span>(<span class=\"string\">'./app/models/bear'</span>);\n\n<span class=\"keyword\">...</span>\n</code></pre><p>现在应用后端已经完成，接下来才是本文的重点，奔跑吧！兄弟！</p>\n<h3 id=\"Express路由模块和路由\">Express路由模块和路由</h3>\n<p>我们将会使用Express Router实例来管理我们的路由，下面是我们将会用到的路由以及对应的HTTP方法。</p>\n<table>\n<thead>\n<tr>\n<th>Route</th>\n<th>HTTP Verb</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/api/bears</td>\n<td>GET</td>\n<td>Get all the bears.</td>\n</tr>\n<tr>\n<td>/api/bears</td>\n<td>POST</td>\n<td>Create a bear.</td>\n</tr>\n<tr>\n<td>/api/bears/:bear_id</td>\n<td>GET</td>\n<td>Get a single bear.</td>\n</tr>\n<tr>\n<td>/api/bears/:bear_id</td>\n<td>PUT</td>\n<td>Update a bear with new info.</td>\n</tr>\n<tr>\n<td>/api/bears/:bear_id</td>\n<td>DELETE</td>\n<td>Delete a bear.</td>\n</tr>\n</tbody>\n</table>\n<p>这已经覆盖API所需的基本路由，同时也保持了我们的行为和HTPP方法同步的良好格式。</p>\n<h3 id=\"路由中间件\">路由中间件</h3>\n<p>我们已经定义了第一个路由以及看到了它的作用。Express Router为我们在定义路由时提供很大的灵活性。</p>\n<p>我们希望在每次请求API时都可以得到反馈信息，我只需要在代码中添加<strong>console.log()</strong>。</p>\n<pre><code><span class=\"comment\">// server.js</span>\n\n...\n\n<span class=\"comment\">// ROUTES FOR OUR API</span>\n<span class=\"comment\">// =============================================================================</span>\n<span class=\"keyword\">var</span> router = express.Router();                 <span class=\"comment\">// get an instance of the express Router</span>\n\n<span class=\"comment\">// middleware to use for all requests</span>\nrouter.<span class=\"keyword\">use</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res, next)</span> </span>{\n    <span class=\"comment\">// do logging</span>\n    console.log(<span class=\"string\">'Something is happening.'</span>);\n    next(); <span class=\"comment\">// make sure we go to the next routes and don't stop here</span>\n});\n\n<span class=\"comment\">// test route to make sure everything is working (accessed at GET http://localhost:8080/api)</span>\nrouter.<span class=\"keyword\">get</span>(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span> </span>{\n    res.json({ message: <span class=\"string\">'hooray! welcome to our api!'</span> });    \n});\n\n<span class=\"comment\">// more routes for our API will happen here</span>\n\n<span class=\"comment\">// REGISTER OUR ROUTES -------------------------------</span>\n<span class=\"comment\">// all of our routes will be prefixed with /api</span>\napp.<span class=\"keyword\">use</span>(<span class=\"string\">'/api'</span>, router);\n\n...\n</code></pre><p>为了达到那个目的我仅需要声明<strong>router.use(function())</strong>。我们定义路由的顺序很重要，因为程序会根据我们定义的顺序执行。</p>\n<p>我们返回的数据时JSON格式的，对于API来说这是标准的同样这也方便使用我们API的用户调用。</p>\n<p>我们同样需要添加<strong>next()</strong>标识程序需要继续执行下面的路由，这点很重要防止程序在此终止。</p>\n<p><strong>Middleware Uses</strong> 中间件的作用很强大，我们可以验证请求以此保证请求的安全性，同样可以在这里抛出异常。同时还可以做登陆分析，总之在这里可以很多事。</p>\n<p>疯狂吧！</p>\n<h3 id=\"测试我们的中间件\">测试我们的中间件</h3>\n<p>现在使用Postman向我们的应用程序发送一个请求，在终端就会看到<strong>Something is happening</strong>。</p>\n<p>通过中间件，可以做一些了不起的事情，可以对用户进行权限管理。</p>\n<h3 id=\"创建基本路由\">创建基本路由</h3>\n<p>我们首先需要<strong>获取</strong>和<strong>创建</strong>的接口，这两项都是通过<strong>/api/bears</strong>api完成的，我们要先创建一个实例以备后用。</p>\n<h3 id=\"创建一个熊_POST_/api/bears\">创建一个熊 POST /api/bears</h3>\n<p>我们将会添加一个处理POST的路由接着使用Postman来测试。</p>\n<pre><code>// server.js\n\n<span class=\"keyword\">...</span>\n\n// ROUTES FOR OUR API\n// =============================================================================\n\n<span class=\"keyword\">...</span> // &lt;-- route middleware and first route are here\n\n// more routes <span class=\"keyword\">for</span> our API will happen here\n\n// on routes that end <span class=\"keyword\">in</span> /bears\n// ----------------------------------------------------\nrouter.route(<span class=\"string\">'/bears'</span>)\n\n    // create a bear (accessed at POST http://localhost:<span class=\"number\">8080</span>/api/bears)\n    .post(<span class=\"keyword\">function</span>(req, res) {\n\n        var bear = new Bear();         // create a new instance of the Bear model\n        bear.name = req.body.name;  // set the bears name (comes from the request)\n\n        // save the bear and check <span class=\"keyword\">for</span> errors\n        bear.save(<span class=\"keyword\">function</span>(err) {\n            <span class=\"keyword\">if</span> (err)\n                res.send(err);\n\n            res.json({ message: <span class=\"string\">'Bear created!'</span> });\n        });\n\n    });\n\n// REGISTER OUR ROUTES -------------------------------\n// all of our routes will be prefixed with /api\napp.use(<span class=\"string\">'/api'</span>, router);\n\n<span class=\"keyword\">...</span>\n</code></pre><p>现在我们已经创建好POST路由，以后都会使用<strong>router.route</strong>来处理相同路由。可以处理所有以<strong>/bears</strong>结尾的请求。</p>\n<p>接下来用Postman看看创建的熊。</p>\n<p>注意我们以<strong>x-www-form-urlencoded</strong>的形式来发送<strong>name</strong>，这样就会以查询字符串的形式发送到Node服务器。</p>\n<p>我们得到创建成功后的信息，接着来处理获取熊的接口。</p>\n<h3 id=\"获取所有的熊\">获取所有的熊</h3>\n<p>通过router.route(),我们可以把不同的路由连接在一起，这保证了代码的简洁。</p>\n<p>// server.js</p>\n<pre><code><span class=\"keyword\">...</span>\n\n// ROUTES FOR OUR API\n// =============================================================================\n\n<span class=\"keyword\">...</span> // &lt;-- route middleware and first route are here\n\n// more routes <span class=\"keyword\">for</span> our API will happen here\n\n// on routes that end <span class=\"keyword\">in</span> /bears\n// ----------------------------------------------------\nrouter.route(<span class=\"string\">'/bears'</span>)\n\n    // create a bear (accessed at POST http://localhost:<span class=\"number\">8080</span>/api/bears)\n    .post(<span class=\"keyword\">function</span>(req, res) {\n\n        <span class=\"keyword\">...</span>\n\n    })\n\n    // get all the bears (accessed at GET http://localhost:<span class=\"number\">8080</span>/api/bears)\n    .get(<span class=\"keyword\">function</span>(req, res) {\n        Bear.find(<span class=\"keyword\">function</span>(err, bears) {\n            <span class=\"keyword\">if</span> (err)\n                res.send(err);\n\n            res.json(bears);\n        });\n    });\n\n// REGISTER OUR ROUTES -------------------------------\n// all of our routes will be prefixed with /api\napp.use(<span class=\"string\">'/api'</span>, router);\n\n<span class=\"keyword\">...</span>\n</code></pre><p>一个简单的路由，仅仅向<strong><a href=\"http://localhost:8080/api/bears\" target=\"_blank\" rel=\"external\">http://localhost:8080/api/bears</a></strong>发送了一个GET请求，我们就能得到以JSON格式数据。</p>\n<h3 id=\"为处理单个熊创建路由\">为处理单个熊创建路由</h3>\n<p>我们以<strong>/bears</strong>结尾的路由来处理多个实例，现在来处理单个的实例，比如我们传递一个熊的ID时。</p>\n<p>通过以<strong>/bears/:bear_id</strong>结尾的路由来出来单个实例：</p>\n<p>＊ 获取一个实例<br>＊ 更新一个实例<br>＊ 删除一个实例</p>\n<p><strong>:bear_id</strong>可以从请求头中获取，这得益于<strong>body-parser</strong>。</p>\n<h3 id=\"获取一个实例\">获取一个实例</h3>\n<p>我们将会添加一个路由去处理以<strong>:bear_id</strong>结尾的URL。</p>\n<pre><code>// server.js\n\n<span class=\"keyword\">...</span>\n\n// ROUTES FOR OUR API\n// =============================================================================\n\n<span class=\"keyword\">...</span>\n\n// on routes that end <span class=\"keyword\">in</span> /bears\n// ----------------------------------------------------\nrouter.route(<span class=\"string\">'/bears'</span>)\n    <span class=\"keyword\">...</span>\n\n// on routes that end <span class=\"keyword\">in</span> /bears/:bear_id\n// ----------------------------------------------------\nrouter.route(<span class=\"string\">'/bears/:bear_id'</span>)\n\n    // get the bear with that id (accessed at GET http://localhost:<span class=\"number\">8080</span>/api/bears/:bear_id)\n    .get(<span class=\"keyword\">function</span>(req, res) {\n        Bear.findById(req.params.bear_id, <span class=\"keyword\">function</span>(err, bear) {\n            <span class=\"keyword\">if</span> (err)\n                res.send(err);\n            res.json(bear);\n        });\n    });\n\n// REGISTER OUR ROUTES -------------------------------\n// all of our routes will be prefixed with /api\napp.use(<span class=\"string\">'/api'</span>, router);\n\n<span class=\"keyword\">...</span>\n</code></pre><p>通过上面获取全部实例的数据，可以看到单个熊的ID，用这个ID可以在Postman中得到单个的实例。</p>\n<h3 id=\"更新实例\">更新实例</h3>\n<p>用router.route()连接起类似的路由并添加<strong>.put()</strong>。</p>\n<pre><code>// server.js\n\n<span class=\"keyword\">...</span>\n\n// on routes that end <span class=\"keyword\">in</span> /bears\n// ----------------------------------------------------\nrouter.route(<span class=\"string\">'/bears'</span>)\n    <span class=\"keyword\">...</span>\n\n// on routes that end <span class=\"keyword\">in</span> /bears/:bear_id\n// ----------------------------------------------------\nrouter.route(<span class=\"string\">'/bears/:bear_id'</span>)\n\n    // get the bear with that id (accessed at GET http://localhost:<span class=\"number\">8080</span>/api/bears/:bear_id)\n    .get(<span class=\"keyword\">function</span>(req, res) {\n        <span class=\"keyword\">...</span>\n    })\n\n    // update the bear with this id (accessed at PUT http://localhost:<span class=\"number\">8080</span>/api/bears/:bear_id)\n    .put(<span class=\"keyword\">function</span>(req, res) {\n\n        // use our bear model to find the bear we want\n        Bear.findById(req.params.bear_id, <span class=\"keyword\">function</span>(err, bear) {\n\n            <span class=\"keyword\">if</span> (err)\n                res.send(err);\n\n            bear.name = req.body.name;     // update the bears info\n\n            // save the bear\n            bear.save(<span class=\"keyword\">function</span>(err) {\n                <span class=\"keyword\">if</span> (err)\n                    res.send(err);\n\n                res.json({ message: <span class=\"string\">'Bear updated!'</span> });\n            });\n\n        });\n    });\n\n// REGISTER OUR ROUTES -------------------------------\n// all of our routes will be prefixed with /api\napp.use(<span class=\"string\">'/api'</span>, router);\n\n<span class=\"keyword\">...</span>\n</code></pre><p>我们还是使用前面的ID获得实例，然后通过PUT方法，在参数里面修改然后保存。</p>\n<p>为了确定更改生效，我们需要再查一遍实例。</p>\n<h3 id=\"删除一个实例\">删除一个实例</h3>\n<p>当需要删除一个实例时，仅仅需要向<strong>/api/bears/:bear_id</strong>发送DELETE请求。</p>\n<p>下面添加对应的代码：</p>\n<pre><code>// server.js\n\n<span class=\"keyword\">...</span>\n\n// on routes that end <span class=\"keyword\">in</span> /bears\n// ----------------------------------------------------\nrouter.route(<span class=\"string\">'/bears'</span>)\n    <span class=\"keyword\">...</span>\n\n// on routes that end <span class=\"keyword\">in</span> /bears/:bear_id\n// ----------------------------------------------------\nrouter.route(<span class=\"string\">'/bears/:bear_id'</span>)\n\n    // get the bear with that id (accessed at GET http://localhost:<span class=\"number\">8080</span>/api/bears/:bear_id)\n    .get(<span class=\"keyword\">function</span>(req, res) {\n        <span class=\"keyword\">...</span>\n    })\n\n    // update the bear with this id (accessed at PUT http://localhost:<span class=\"number\">8080</span>/api/bears/:bear_id)\n    .put(<span class=\"keyword\">function</span>(req, res) {\n        <span class=\"keyword\">...</span>\n    })\n\n    // delete the bear with this id (accessed at DELETE http://localhost:<span class=\"number\">8080</span>/api/bears/:bear_id)\n    .delete(<span class=\"keyword\">function</span>(req, res) {\n        Bear.remove({\n            _id: req.params.bear_id\n        }, <span class=\"keyword\">function</span>(err, bear) {\n            <span class=\"keyword\">if</span> (err)\n                res.send(err);\n\n            res.json({ message: <span class=\"string\">'Successfully deleted'</span> });\n        });\n    });\n\n// REGISTER OUR ROUTES -------------------------------\n// all of our routes will be prefixed with /api\napp.use(<span class=\"string\">'/api'</span>, router);\n\n<span class=\"keyword\">...</span>\n</code></pre><p>使用一个存在的bear_id通过DELETE方法向我们的API发送请求，将会删除一个对应的实例。</p>\n<p>接着再去获得所有实例时，就会得到空值。</p>\n<h3 id=\"结论\">结论</h3>\n<p>现在我们已有自己的API来处理CRUD，有一个好的基础才能创建一个更大和更健壮的程序。</p>\n<p>这只是一个简洁的使用Express4创建的Node API，其实还有好多需要做和可以做的。比如：添加权限控制，友好的错误提示等。</p>\n<p>如果有任何疑问，可以在下面留言。</p>\n","source":"_posts/使用Express4和Node搭建RESTful-API.md","raw":"title: 使用Express4和Node搭建RESTful API\ndate: 2014-11-03 12:46:33\ncategories:\ntags: Node Express\n---\n几天前随着Express 4.0的发布，我们许多Node项目的路由需要跟着更改。伴随Express Router的变化，我们在设置应用路由时更加灵活。\n\n今天我们将使用Node,Express 4.0和它的路由来创建RESTful API，同时使用Mongoose与MongoDB交互。在Chrome中使用Postman来测试我们的API。\n\n接下来看看我们要创建的API以及它的用途。\n\n###我们的程序###\n\n我们将要创建的API:\n\n* 处理CRUD\n* 标准的URL(`http://example.com/api/bears`和`http://example.com/api/bears/:bear_id`)\n* 使用合适的HTTP来搭配RESTful(GET,POST,PUT和DELETE)\n* 返回JSON数据\n* 控制台打印出所有的请求\n\n这些都是严格遵循[RESTful APIS](http://scotch.io/bar-talk/designing-a-restful-web-api)的规范的，可以灵活的转变为任何你想创建的程序（用户，超级英雄，啤酒等）\n\n开始之前要确保你安装了Node环境然后我们才能开始！\n\n###启程###\n\n我们先整理一下创建API所需要的文件，我们需要定义Node packages，使用Express搭建服务、路由和模型，最后，测试我们的API。\n\n下面是我们的目录结构，我们需要很多文件同时为了演示我们尽可能的精简。当真的要做一个产品或者一个大的应用时，你应该拥有一个更好的结构（比如剥离routes到一个单独的文件里）。\n\n\t- app/\n\t\t----- models/\n\t\t---------- bear.js \t// our bear model\n\t\t- node_modules/     // created by npm. holds our dependencies/packages\n\t\t- package.json \t\t// define all our node app and dependencies\n\t\t- server.js \t\t// configure our application and create routes\n\n###声明Node依赖包###\n\n我们所有的Node项目都会在`package.json`里面定义依赖的包。先创建一个包含下面内容的文件：\n\n\t// package.json\n\t{\n\t\t\"name\": \"node-api\",\n\t\t\"main\": \"server.js\",\n\t\t\"dependencies\": {\n\t\t\t\"express\": \"~4.0.0\",\n\t\t\t\"mongoose\": \"~3.6.13\",\n\t\t\t\"body-parser\": \"~1.0.1\"\n\t\t}\n\t}\n\n__这些包的作用是啥？__ `express`是Node的Web框架，`mongoose`是和MongoDB数据库通信的对象关系映射，`body-parser`使我们能在HTTP请求中获得参数信息，方便我们做一些事情。\n\n###安装Node包###\n\n这或许是最简单的一步，在你的项目根目录打开终端输入：\n\n\t$ npm install\n\nnpm会拉去所有的依赖包到`node_module`中。\n\n`npm`是Node的包管理工具，现在我们有了所有依赖的包，可以开始创建API了。因为`server.js`是我们在package.json中声明的程序入口，所以我们找到`server.js`文件（没有的创建）来配置程序。\n\n###搭建我们的服务器###\n\nNode启动程序时会检查一些配置信息。\n\n我们会保持代码的简洁以及良好的注释，清晰的了解我们每一步完成了什么。\n\n\t// server.js\n\n\t// BASE SETUP\n\t// =============================================================================\n\n\t// call the packages we need\n\tvar express    = require('express'); \t\t// call express\n\tvar app        = express(); \t\t\t\t// define our app using express\n\tvar bodyParser = require('body-parser');\n\n\t// configure app to use bodyParser()\n\t// this will let us get the data from a POST\n\tapp.use(bodyParser.urlencoded({ extended: true }));\n\tapp.use(bodyParser.json());\n\n\tvar port = process.env.PORT || 8080; \t\t// set our port\n\n\t// ROUTES FOR OUR API\n\t// =============================================================================\n\tvar router = express.Router(); \t\t\t\t// get an instance of the express Router\n\n\t// test route to make sure everything is working (accessed at GET http://localhost:8080/api)\n\trouter.get('/', function(req, res) {\n\t\tres.json({ message: 'hooray! welcome to our api!' });\t\n\t});\n\n\t// more routes for our API will happen here\n\n\t// REGISTER OUR ROUTES -------------------------------\n\t// all of our routes will be prefixed with /api\n\tapp.use('/api', router);\n\n\t// START THE SERVER\n\t// =============================================================================\n\tapp.listen(port);\n\tconsole.log('Magic happens on port ' + port);\n\n哇哦，我们做了许多事，但都很简单。接下来我们挨个看看：\n\n* __基础设置__ 在我们的设置中包含使用express初始化应用，通过bodyParser来轻松获取请求头信息以及设置应用的端口。\n\n* __路由配置__ 我们使用Express的Router来定义应用的路由。\n\n* __启动服务__ 我们会在先前定义的端口启动应用，然后就可以运行和测试它。\n\n###开启服务并测试###\n\n确保所有的工作已经就绪，接下来我们启动应用并在先前定义的路由上发一个请求确保能得到一个响应。\n\n使用下面的命令启动服务：\n\n\t$ node server.js\n\n你将会看到如下的界面：\n\n![img](http://img5.picbed.org/uploads/2014/11/node_api_start_server.png)\n\n看到程序已经启动，接着来测试一下。\n\n###使用Postman测试我们的API###\n\nPostman会帮助我们测试API，它基本就是在我们填写的路径上发送HTTP请求。我们甚至可以传递参数和权限（在这个应用中我们暂且不需要）。\n\n打开Postman看看如何使用：\n\n![img](http://img4.tuchuang.org/uploads/2014/11/postman_rest_client_node_api.png)\n\n你所需要做的就是：__填写目的url，选择一个http方法最后发送请求__，够简单吧？\n\n接下来就是期盼已久的时刻，在URL一栏中输入__http://localhost:8080/api__，由于我们仅从服务器获得数据，所以我们选择__GET__方法，接着点击发送。\n\n![post man](http://img3.tuchuang.org/uploads/2014/11/node_api_postman_test.png)\n\n不错，我们得到了预期的结果，现在我们可以为请求服务。接下来连上数据库方便我们执行CRUD操作。\n\n###数据库和Beaer模型###\n\n我们会使这部分简短留有足够的时间在创建API路由上。我们所需要做的就是创建MongoDB数据库以及使程序和它相连。为了简化和数据库的操作我们同样需要mongoose模型。\n\n__创建数据库和链接__\n\n我们使用Modulus提供的数据库，你在上面可以创建自己的数据库以及可以在本地使用，或者使用Mongolab，所有你所需要的就是一个链接，就像下面那样就你的程序就可以连接。\n\n一旦创建好数据库以及有一个可以连接的地址，接着在__server.js__里面添加下面两行：\n\n\t// server.js\n\n\t// BASE SETUP\n\t// =============================================================================\n\n\t...\n\n\tvar mongoose   = require('mongoose');\n\tmongoose.connect('mongodb://node:node@novus.modulusmongo.net:27017/Iganiq8o'); // connect to our database\n\n\t...\n\n现在我们已经获取mongoose的包同时连上架设在远程Modulus的数据库。接下来就需要创建bears的模型。\n\n__Bear Moder app/models/bear.js__\n\n因为创建模型不是本教程的核心，所以我们只一个带有名字字段的模型。接下来创建并添加如下代码：\n\n\t// app/models/bear.js\n\n\tvar mongoose     = require('mongoose');\n\tvar Schema       = mongoose.Schema;\n\n\tvar BearSchema   = new Schema({\n\t\tname: String\n\t});\n\n\tmodule.exports = mongoose.model('Bear', BearSchema);\n\n创建完上面的文件，接着就要在我们的server.js中引入：\n\n\t// server.js\n\n\t// BASE SETUP\n\t// =============================================================================\n\n\t...\n\n\tvar Bear     = require('./app/models/bear');\n\n\t...\n\n现在应用后端已经完成，接下来才是本文的重点，奔跑吧！兄弟！\n\n###Express路由模块和路由###\n\n我们将会使用Express Router实例来管理我们的路由，下面是我们将会用到的路由以及对应的HTTP方法。\n\n| Route               | HTTP Verb | Description                  |\n|---------------------|-----------|------------------------------|\n| /api/bears          | GET       | Get all the bears.           |\n| /api/bears          | POST      | Create a bear.               |\n| /api/bears/:bear_id | GET       | Get a single bear.           |\n| /api/bears/:bear_id | PUT       | Update a bear with new info. |\n| /api/bears/:bear_id | DELETE    | Delete a bear.               |\n\n这已经覆盖API所需的基本路由，同时也保持了我们的行为和HTPP方法同步的良好格式。\n\n###路由中间件###\n\n我们已经定义了第一个路由以及看到了它的作用。Express Router为我们在定义路由时提供很大的灵活性。\n\n我们希望在每次请求API时都可以得到反馈信息，我只需要在代码中添加__console.log()__。\n\n\t// server.js\n\n\t...\n\n\t// ROUTES FOR OUR API\n\t// =============================================================================\n\tvar router = express.Router(); \t\t\t\t// get an instance of the express Router\n\n\t// middleware to use for all requests\n\trouter.use(function(req, res, next) {\n\t\t// do logging\n\t\tconsole.log('Something is happening.');\n\t\tnext(); // make sure we go to the next routes and don't stop here\n\t});\n\n\t// test route to make sure everything is working (accessed at GET http://localhost:8080/api)\n\trouter.get('/', function(req, res) {\n\t\tres.json({ message: 'hooray! welcome to our api!' });\t\n\t});\n\n\t// more routes for our API will happen here\n\n\t// REGISTER OUR ROUTES -------------------------------\n\t// all of our routes will be prefixed with /api\n\tapp.use('/api', router);\n\n\t...\n\n为了达到那个目的我仅需要声明__router.use(function())__。我们定义路由的顺序很重要，因为程序会根据我们定义的顺序执行。\n\n我们返回的数据时JSON格式的，对于API来说这是标准的同样这也方便使用我们API的用户调用。\n\n我们同样需要添加__next()__标识程序需要继续执行下面的路由，这点很重要防止程序在此终止。\n\n__Middleware Uses__ 中间件的作用很强大，我们可以验证请求以此保证请求的安全性，同样可以在这里抛出异常。同时还可以做登陆分析，总之在这里可以很多事。\n\n疯狂吧！\n\n###测试我们的中间件###\n\n现在使用Postman向我们的应用程序发送一个请求，在终端就会看到__Something is happening__。\n\n\n通过中间件，可以做一些了不起的事情，可以对用户进行权限管理。\n\n###创建基本路由###\n\n我们首先需要__获取__和__创建__的接口，这两项都是通过__/api/bears__api完成的，我们要先创建一个实例以备后用。\n\n###创建一个熊 POST /api/bears###\n\n我们将会添加一个处理POST的路由接着使用Postman来测试。\n\n\t// server.js\n\n\t...\n\n\t// ROUTES FOR OUR API\n\t// =============================================================================\n\n\t... // <-- route middleware and first route are here\n\n\t// more routes for our API will happen here\n\n\t// on routes that end in /bears\n\t// ----------------------------------------------------\n\trouter.route('/bears')\n\n\t\t// create a bear (accessed at POST http://localhost:8080/api/bears)\n\t\t.post(function(req, res) {\n\t\t\t\n\t\t\tvar bear = new Bear(); \t\t// create a new instance of the Bear model\n\t\t\tbear.name = req.body.name;  // set the bears name (comes from the request)\n\n\t\t\t// save the bear and check for errors\n\t\t\tbear.save(function(err) {\n\t\t\t\tif (err)\n\t\t\t\t\tres.send(err);\n\n\t\t\t\tres.json({ message: 'Bear created!' });\n\t\t\t});\n\t\t\t\n\t\t});\n\n\t// REGISTER OUR ROUTES -------------------------------\n\t// all of our routes will be prefixed with /api\n\tapp.use('/api', router);\n\n\t...\n\n现在我们已经创建好POST路由，以后都会使用__router.route__来处理相同路由。可以处理所有以__/bears__结尾的请求。\n\n接下来用Postman看看创建的熊。\n\n\n注意我们以__x-www-form-urlencoded__的形式来发送__name__，这样就会以查询字符串的形式发送到Node服务器。\n\t\n我们得到创建成功后的信息，接着来处理获取熊的接口。\n\n###获取所有的熊###\n\n通过router.route(),我们可以把不同的路由连接在一起，这保证了代码的简洁。\n\n// server.js\n\n\t...\n\n\t// ROUTES FOR OUR API\n\t// =============================================================================\n\n\t... // <-- route middleware and first route are here\n\n\t// more routes for our API will happen here\n\n\t// on routes that end in /bears\n\t// ----------------------------------------------------\n\trouter.route('/bears')\n\n\t\t// create a bear (accessed at POST http://localhost:8080/api/bears)\n\t\t.post(function(req, res) {\n\t\t\t\n\t\t\t...\n\t\t\t\n\t\t})\n\n\t\t// get all the bears (accessed at GET http://localhost:8080/api/bears)\n\t\t.get(function(req, res) {\n\t\t\tBear.find(function(err, bears) {\n\t\t\t\tif (err)\n\t\t\t\t\tres.send(err);\n\n\t\t\t\tres.json(bears);\n\t\t\t});\n\t\t});\n\n\t// REGISTER OUR ROUTES -------------------------------\n\t// all of our routes will be prefixed with /api\n\tapp.use('/api', router);\n\n\t...\n\n一个简单的路由，仅仅向__http://localhost:8080/api/bears__发送了一个GET请求，我们就能得到以JSON格式数据。\n\n###为处理单个熊创建路由###\n\n我们以__/bears__结尾的路由来处理多个实例，现在来处理单个的实例，比如我们传递一个熊的ID时。\n\n通过以__/bears/:bear_id__结尾的路由来出来单个实例：\n\n＊ 获取一个实例\n＊ 更新一个实例\n＊ 删除一个实例\n\n__:bear_id__可以从请求头中获取，这得益于__body-parser__。\n\n###获取一个实例###\n\n我们将会添加一个路由去处理以__:bear_id__结尾的URL。\n\n\t// server.js\n\n\t...\n\n\t// ROUTES FOR OUR API\n\t// =============================================================================\n\n\t...\n\n\t// on routes that end in /bears\n\t// ----------------------------------------------------\n\trouter.route('/bears')\n\t\t...\n\n\t// on routes that end in /bears/:bear_id\n\t// ----------------------------------------------------\n\trouter.route('/bears/:bear_id')\n\n\t\t// get the bear with that id (accessed at GET http://localhost:8080/api/bears/:bear_id)\n\t\t.get(function(req, res) {\n\t\t\tBear.findById(req.params.bear_id, function(err, bear) {\n\t\t\t\tif (err)\n\t\t\t\t\tres.send(err);\n\t\t\t\tres.json(bear);\n\t\t\t});\n\t\t});\n\n\t// REGISTER OUR ROUTES -------------------------------\n\t// all of our routes will be prefixed with /api\n\tapp.use('/api', router);\n\n\t...\n\n通过上面获取全部实例的数据，可以看到单个熊的ID，用这个ID可以在Postman中得到单个的实例。\n\n###更新实例###\n\n用router.route()连接起类似的路由并添加__.put()__。\n\n\t// server.js\n\n\t...\n\n\t// on routes that end in /bears\n\t// ----------------------------------------------------\n\trouter.route('/bears')\n\t\t...\n\n\t// on routes that end in /bears/:bear_id\n\t// ----------------------------------------------------\n\trouter.route('/bears/:bear_id')\n\n\t\t// get the bear with that id (accessed at GET http://localhost:8080/api/bears/:bear_id)\n\t\t.get(function(req, res) {\n\t\t\t...\n\t\t})\n\n\t\t// update the bear with this id (accessed at PUT http://localhost:8080/api/bears/:bear_id)\n\t\t.put(function(req, res) {\n\n\t\t\t// use our bear model to find the bear we want\n\t\t\tBear.findById(req.params.bear_id, function(err, bear) {\n\n\t\t\t\tif (err)\n\t\t\t\t\tres.send(err);\n\n\t\t\t\tbear.name = req.body.name; \t// update the bears info\n\n\t\t\t\t// save the bear\n\t\t\t\tbear.save(function(err) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\tres.send(err);\n\n\t\t\t\t\tres.json({ message: 'Bear updated!' });\n\t\t\t\t});\n\n\t\t\t});\n\t\t});\n\n\t// REGISTER OUR ROUTES -------------------------------\n\t// all of our routes will be prefixed with /api\n\tapp.use('/api', router);\n\n\t...\n\n我们还是使用前面的ID获得实例，然后通过PUT方法，在参数里面修改然后保存。\n\n为了确定更改生效，我们需要再查一遍实例。\n\n###删除一个实例###\n\n当需要删除一个实例时，仅仅需要向__/api/bears/:bear_id__发送DELETE请求。\n\n下面添加对应的代码：\n\n\t// server.js\n\n\t...\n\n\t// on routes that end in /bears\n\t// ----------------------------------------------------\n\trouter.route('/bears')\n\t\t...\n\n\t// on routes that end in /bears/:bear_id\n\t// ----------------------------------------------------\n\trouter.route('/bears/:bear_id')\n\n\t\t// get the bear with that id (accessed at GET http://localhost:8080/api/bears/:bear_id)\n\t\t.get(function(req, res) {\n\t\t\t...\n\t\t})\n\n\t\t// update the bear with this id (accessed at PUT http://localhost:8080/api/bears/:bear_id)\n\t\t.put(function(req, res) {\n\t\t\t...\n\t\t})\n\n\t\t// delete the bear with this id (accessed at DELETE http://localhost:8080/api/bears/:bear_id)\n\t\t.delete(function(req, res) {\n\t\t\tBear.remove({\n\t\t\t\t_id: req.params.bear_id\n\t\t\t}, function(err, bear) {\n\t\t\t\tif (err)\n\t\t\t\t\tres.send(err);\n\n\t\t\t\tres.json({ message: 'Successfully deleted' });\n\t\t\t});\n\t\t});\n\n\t// REGISTER OUR ROUTES -------------------------------\n\t// all of our routes will be prefixed with /api\n\tapp.use('/api', router);\n\n\t...\n\n使用一个存在的bear_id通过DELETE方法向我们的API发送请求，将会删除一个对应的实例。\n\n接着再去获得所有实例时，就会得到空值。\n\n###结论###\n\n现在我们已有自己的API来处理CRUD，有一个好的基础才能创建一个更大和更健壮的程序。\n\n这只是一个简洁的使用Express4创建的Node API，其实还有好多需要做和可以做的。比如：添加权限控制，友好的错误提示等。\n\n如果有任何疑问，可以在下面留言。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"使用Express4和Node搭建RESTful-API","updated":1415431663000,"excerpt":"","_id":"hcqiah5v2giixznf","comments":true,"layout":"post","photos":[],"link":""},{"title":"关于Git无法提交 index.lock的解决办法","date":1407230792000,"tags":[],"content":"<p>有时候提交代码时，会报错：</p>\n<pre><code>$ git commit <span class=\"operator\">-a</span>\n</code></pre><blockquote>\n<p>fatal: Unable to create ‘e:/git/Android/XXXXXX/.git/index.lock’: File exists.<br>If no other git process is currently running, this probably means a<br>git process crashed in this repository earlier. Make sure no other git<br>process is running and remove the file manually to continue.</p>\n</blockquote>\n<p>解决方法：</p>\n<p>找到index.lock 删除即可</p>\n","source":"_posts/关于Git无法提交-indexlock的解决办法.md","raw":"title: '关于Git无法提交 index.lock的解决办法'\ndate: 2014-08-05 17:26:32\ntags:\n---\n有时候提交代码时，会报错：\n\n\t$ git commit -a\n\n>fatal: Unable to create 'e:/git/Android/XXXXXX/.git/index.lock': File exists.\nIf no other git process is currently running, this probably means a\ngit process crashed in this repository earlier. Make sure no other git\nprocess is running and remove the file manually to continue.\n\n解决方法：\n\n找到index.lock 删除即可","slug":"关于Git无法提交-indexlock的解决办法","updated":1415105931000,"excerpt":"","_id":"c7oxiva1wrlvqbia","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"占位符","date":1403856808000,"tags":[],"content":"<p>前端做静态页面的时候，经常会遇到图片占位的问题。若要遇到各种尺寸的图片，还要去切各种尺寸，十足很疼！所以下面给大家分享几个工作中用的图片占位：</p>\n<ul>\n<li><a href=\"http://lorempixel.com/\" target=\"_blank\" rel=\"external\">lorempixum</a></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">http:</span>/<span class=\"regexp\">/lorempixum.com/</span><span class=\"number\">400</span>/<span class=\"number\">200</span>，<span class=\"number\">400</span>x20<span class=\"number\">0</span>的随机图片</div><div class=\"line\"><span class=\"symbol\">http:</span>/<span class=\"regexp\">/lorempixum.com/g</span><span class=\"regexp\">/400/</span><span class=\"number\">200</span>，<span class=\"number\">400</span>x20<span class=\"number\">0</span>的随机灰度图片</div><div class=\"line\"><span class=\"symbol\">http:</span>/<span class=\"regexp\">/lorempixum.com/</span><span class=\"number\">400</span>/<span class=\"number\">200</span>/sports，<span class=\"number\">400</span>x20<span class=\"number\">0</span>的随机体育类图片</div></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"http://dummyimage.com/\" target=\"_blank\" rel=\"external\">Dynamic Dummy Image Generator</a></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">http:</span>/<span class=\"regexp\">/dummyimage.com/qvga</span></div><div class=\"line\"><span class=\"symbol\">http:</span>/<span class=\"regexp\">/dummyimage.com/skyscraper</span><span class=\"regexp\">/f0f/f</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"http://placebox.es/\" target=\"_blank\" rel=\"external\">placebox</a></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//placebox.es/150/150/d97f19/f1f1f1/</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"http://placehold.it/\" target=\"_blank\" rel=\"external\">placehold</a></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">http</span>://placehold.<span class=\"keyword\">it</span>/<span class=\"number\">350</span>x150</div><div class=\"line\"><span class=\"keyword\">http</span>://placehold.<span class=\"keyword\">it</span>/<span class=\"number\">350</span>x150/ff0</div></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"http://fakeimg.pl/\" target=\"_blank\" rel=\"external\">fakeimg</a></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">http</span>://fakeimg.pl/<span class=\"number\">300</span></div><div class=\"line\"><span class=\"keyword\">http</span>://fakeimg.pl/<span class=\"number\">250</span>x100</div><div class=\"line\"><span class=\"keyword\">http</span>://fakeimg.pl/<span class=\"number\">250</span>x100/ff0000</div><div class=\"line\"><span class=\"keyword\">http</span>://fakeimg.pl/<span class=\"number\">350</span>x200/ff0000/<span class=\"number\">00</span></div><div class=\"line\"><span class=\"keyword\">http</span>://fakeimg.pl/<span class=\"number\">350</span>x200/ff0000,<span class=\"number\">128</span>/<span class=\"number\">000</span>,<span class=\"number\">25</span></div><div class=\"line\"><span class=\"keyword\">http</span>://fakeimg.pl/<span class=\"number\">350</span>x200/?<span class=\"keyword\">text</span>=Hell</div><div class=\"line\"><span class=\"keyword\">http</span>://fakeimg.pl/<span class=\"number\">350</span>x200/?<span class=\"keyword\">text</span>=World&font=lobste</div></pre></td></tr></table></figure>\n\n<p>That’s all!</p>\n","source":"_posts/占位符.md","raw":"title: 占位符\r\ndate: 2014-06-27 16:13:28\r\ntags:\r\n---\r\n\r\n前端做静态页面的时候，经常会遇到图片占位的问题。若要遇到各种尺寸的图片，还要去切各种尺寸，十足很疼！所以下面给大家分享几个工作中用的图片占位：\r\n\r\n*\t[lorempixum](http://lorempixel.com/)\r\n\r\n```\r\nhttp://lorempixum.com/400/200，400x200的随机图片\r\nhttp://lorempixum.com/g/400/200，400x200的随机灰度图片\r\nhttp://lorempixum.com/400/200/sports，400x200的随机体育类图片\r\n```\r\n\r\n*\t[Dynamic Dummy Image Generator](http://dummyimage.com/)\r\n\r\n```\r\nhttp://dummyimage.com/qvga\r\nhttp://dummyimage.com/skyscraper/f0f/f\r\n```\r\n\r\n*\t[placebox](http://placebox.es/)\r\n\r\n```\r\nhttp://placebox.es/150/150/d97f19/f1f1f1/\r\n```\r\n\r\n*\t[placehold](http://placehold.it/)\r\n\r\n```\r\nhttp://placehold.it/350x150\r\nhttp://placehold.it/350x150/ff0\r\n```\r\n\r\n*\t[fakeimg](http://fakeimg.pl/)\r\n\r\n```\r\nhttp://fakeimg.pl/300\r\nhttp://fakeimg.pl/250x100\r\nhttp://fakeimg.pl/250x100/ff0000\r\nhttp://fakeimg.pl/350x200/ff0000/00\r\nhttp://fakeimg.pl/350x200/ff0000,128/000,25\r\nhttp://fakeimg.pl/350x200/?text=Hell\r\nhttp://fakeimg.pl/350x200/?text=World&font=lobste\r\n```\r\n\r\nThat's all!","slug":"占位符","updated":1415105931000,"excerpt":"","_id":"cxi6al7esyudhepv","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Git 回滚","date":1404363448000,"tags":[],"content":"<p>Git回滚这种操作肯定经常会遇到，记录一下经常常用回滚：</p>\n<h3 id=\"修改最后一次提交的标注信息\">修改最后一次提交的标注信息</h3>\n<p>有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 —amend 选项重新提交：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"operator\"><span class=\"keyword\">commit</span> <span class=\"comment\">--amend</span></span></div></pre></td></tr></table></figure>\n\n<p>命令之后会打开一个编辑器，就可以修改里面的信息然后保存，提交。</p>\n<p>如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 —amend 提交：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"operator\"><span class=\"keyword\">commit</span> -m <span class=\"string\">'initial commit'</span></span></div><div class=\"line\">$ git <span class=\"keyword\">add</span> forgotten_file</div><div class=\"line\">$ git <span class=\"keyword\">commit</span> <span class=\"comment\">--amend</span></div></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h3 id=\"取消已经暂存的文件\">取消已经暂存的文件</h3>\n<p>在使用 git add .之后，发现其中一个文件不需要暂存，这是使用 git status就可以看到：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git status</div><div class=\"line\"><span class=\"keyword\">On</span> branch master</div><div class=\"line\">Changes <span class=\"keyword\">to</span> be committed:</div><div class=\"line\">  (<span class=\"keyword\">use</span> <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> unstage)</div><div class=\"line\"></div><div class=\"line\">        modified:   README.txt</div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure>\n\n<p>可以使用git reset HEAD <file>… </file></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"operator\"><span class=\"keyword\">reset</span> HEAD benchmarks.rb</span></div><div class=\"line\">Unstaged changes <span class=\"keyword\">after</span> <span class=\"keyword\">reset</span>:</div><div class=\"line\">M       benchmarks.rb</div><div class=\"line\">$ git <span class=\"keyword\">status</span></div><div class=\"line\"><span class=\"keyword\">On</span> branch <span class=\"keyword\">master</span></div><div class=\"line\">Changes <span class=\"keyword\">to</span> be committed:</div><div class=\"line\">  (<span class=\"keyword\">use</span> <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> unstage)</div><div class=\"line\"></div><div class=\"line\">        modified:   README.txt</div><div class=\"line\"></div><div class=\"line\">Changes <span class=\"keyword\">not</span> staged <span class=\"keyword\">for</span> <span class=\"keyword\">commit</span>:</div><div class=\"line\">  (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">update</span> what will be committed)</div><div class=\"line\">  (<span class=\"keyword\">use</span> <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure>\n\n<p>现在 benchmarks.rb 文件又回到了之前已修改未暂存的状态。</p>\n<h3 id=\"取消对文件的修改\">取消对文件的修改</h3>\n<p>如果决定对一个文件的修改没有必要，同样使用git status可以看到方法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Changes not staged for <span class=\"operator\"><span class=\"keyword\">commit</span>:</span></div><div class=\"line\">  (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">update</span> what will be committed)</div><div class=\"line\">  (<span class=\"keyword\">use</span> <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure>\n\n<p>接着使用：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout <span class=\"comment\">-- benchmarks.rb</span></div><div class=\"line\">$ git status</div><div class=\"line\"><span class=\"keyword\">On</span> branch master</div><div class=\"line\">Changes <span class=\"keyword\">to</span> be committed:</div><div class=\"line\">  (<span class=\"keyword\">use</span> <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> unstage)</div><div class=\"line\"></div><div class=\"line\">        modified:   README.txt</div></pre></td></tr></table></figure>\n\n<p>此方法是不可逆的，请慎用！！！</p>\n<p>记住，任何已经提交到 Git 的都可以被恢复。即便在已经删除的分支中的提交，或者用 —amend 重新改写的提交，都可以被恢复。所以你可能丢失的数据仅限未提交的信息。</p>\n","source":"_posts/回滚.md","raw":"title: Git 回滚\r\ndate: 2014-07-03 12:57:28\r\ntags:\r\n---\r\n\r\nGit回滚这种操作肯定经常会遇到，记录一下经常常用回滚：\r\n\r\n###修改最后一次提交的标注信息\r\n\r\n有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 --amend 选项重新提交：\r\n\r\n```\r\n$ git commit --amend\r\n```\r\n\r\n命令之后会打开一个编辑器，就可以修改里面的信息然后保存，提交。\r\n\r\n如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 --amend 提交：\r\n\r\n```\r\n$ git commit -m 'initial commit'\r\n$ git add forgotten_file\r\n$ git commit --amend\r\n```\r\n<!-- more -->\r\n\r\n###取消已经暂存的文件\r\n\r\n在使用 git add .之后，发现其中一个文件不需要暂存，这是使用 git status就可以看到：\r\n\r\n```\r\n$ git add .\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n        modified:   README.txt\r\n        modified:   benchmarks.rb\r\n```\r\n\r\n可以使用git reset HEAD <file>... \r\n\r\n```\r\n$ git reset HEAD benchmarks.rb\r\nUnstaged changes after reset:\r\nM       benchmarks.rb\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n        modified:   README.txt\r\n\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n        modified:   benchmarks.rb\r\n```\r\n现在 benchmarks.rb 文件又回到了之前已修改未暂存的状态。\r\n\r\n###取消对文件的修改\r\n\r\n如果决定对一个文件的修改没有必要，同样使用git status可以看到方法：\r\n```\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n        modified:   benchmarks.rb\r\n```\r\n\r\n接着使用：\r\n\r\n```\r\n$ git checkout -- benchmarks.rb\r\n$ git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n        modified:   README.txt\r\n```\r\n此方法是不可逆的，请慎用！！！\r\n\r\n记住，任何已经提交到 Git 的都可以被恢复。即便在已经删除的分支中的提交，或者用 --amend 重新改写的提交，都可以被恢复。所以你可能丢失的数据仅限未提交的信息。","slug":"回滚","updated":1415105931000,"excerpt":"<p>Git回滚这种操作肯定经常会遇到，记录一下经常常用回滚：</p>\n<h3 id=\"修改最后一次提交的标注信息\">修改最后一次提交的标注信息</h3>\n<p>有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 —amend 选项重新提交：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"operator\"><span class=\"keyword\">commit</span> <span class=\"comment\">--amend</span></span></div></pre></td></tr></table></figure>\n\n<p>命令之后会打开一个编辑器，就可以修改里面的信息然后保存，提交。</p>\n<p>如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 —amend 提交：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"operator\"><span class=\"keyword\">commit</span> -m <span class=\"string\">'initial commit'</span></span></div><div class=\"line\">$ git <span class=\"keyword\">add</span> forgotten_file</div><div class=\"line\">$ git <span class=\"keyword\">commit</span> <span class=\"comment\">--amend</span></div></pre></td></tr></table></figure>\n\n","_id":"ox8p6pmdyigwebna","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"复制DOS里面的内容","date":1408509012000,"tags":[],"content":"<p>有时候需要复制dos里面打出的信息、日志什么的：</p>\n<ol>\n<li><p>打开dos,在导航栏（最上面）右击，选择 <strong>编辑</strong> &gt; <strong>标记</strong>。</p>\n</li>\n<li><p>然后鼠标选择要复制的内容，Ctrl + C 进行复制。</p>\n</li>\n<li><p>最后粘贴到需要的地方。</p>\n</li>\n</ol>\n","source":"_posts/复制DOS里面的内容.md","raw":"title: 复制DOS里面的内容\ndate: 2014-08-20 12:30:12\ntags:\n---\n有时候需要复制dos里面打出的信息、日志什么的：\n\n1. 打开dos,在导航栏（最上面）右击，选择 __编辑__ > __标记__。\n\n2. 然后鼠标选择要复制的内容，Ctrl + C 进行复制。\n\n3. 最后粘贴到需要的地方。","slug":"复制DOS里面的内容","updated":1415105931000,"excerpt":"","_id":"5xfnbgef5ruylhvv","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Git windows 客户端字体问题","date":1404138775000,"tags":[],"content":"<p>Git客户端一直报如下警告：</p>\n<blockquote>\n<p>Warning: Your console font probably doesn’t support Unicode. If you experience strange characters in the output, consider switching to a TrueType font such as Lucida Console! </p>\n</blockquote>\n<p>查了一下原因是控制台字体问题：改为<strong>宋体</strong>就好了。</p>\n","source":"_posts/客户端字体问题.md","raw":"title: Git windows 客户端字体问题\r\ndate: 2014-06-30 22:32:55\r\ntags:\r\n---\r\n\r\nGit客户端一直报如下警告：\r\n\r\n>Warning: Your console font probably doesn't support Unicode. If you experience strange characters in the output, consider switching to a TrueType font such as Lucida Console! \r\n\r\n查了一下原因是控制台字体问题：改为__宋体__就好了。","slug":"客户端字体问题","updated":1415105931000,"excerpt":"","_id":"dzhplcmkx6gsexbv","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"浏览器的工作原理：新式网络浏览器幕后揭秘","date":1415316316000,"categories":[],"tags":["nggj6hvn31a4t1i3"],"content":"<p>转载：<a href=\"http://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/\" target=\"_blank\" rel=\"external\">浏览器的工作原理：新式网络浏览器幕后揭秘</a></p>\n","source":"_posts/浏览器的工作原理：新式网络浏览器幕后揭秘.md","raw":"title: 浏览器的工作原理：新式网络浏览器幕后揭秘\ndate: 2014-11-07 07:25:16\ncategories:\ntags: 浏览器\n---\n\n转载：[浏览器的工作原理：新式网络浏览器幕后揭秘](http://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/)","slug":"浏览器的工作原理：新式网络浏览器幕后揭秘","updated":1415316379000,"excerpt":"","_id":"whiz42ihx34ofvjm","comments":true,"layout":"post","photos":[],"link":""},{"title":"移动端优化","date":1405154071000,"tags":[],"content":"<p><img src=\"http://img1.picbed.org/uploads/2014/07/5366d0160924ab183425ee3937fae6cd7b890b88.jpg.png\" alt=\"移动设备\"></p>\n<p>移动端优化包括好多东西，我们大致可以朝三个方向努力：<strong>展现、内容和性能</strong>，以此来提高网站的用户体验。</p>\n<p><strong>展现</strong></p>\n<blockquote>\n<p>使网站在各种尺寸的屏幕下表现良好。</p>\n</blockquote>\n<p>现在用户可以使用各种设备（手机、平板、电子阅读器）访问你的网站。固定宽度、三列布局并带有复杂javascript动画和鼠标移动效果的网站，在小屏幕和低配置的设备上显示，显然不是很好。对网页瘦身、线性化网页布局才更加合理。这也就是为什么第一目标是更好的展现你的网页。</p>\n<p><strong>内容</strong></p>\n<blockquote>\n<p>使网站内容适应用户移动设备</p>\n</blockquote>\n<p>想一想如果你的用户使用手机访问你的站点，他们想干什么？一个很好的例子就是<a href=\"http://www.alaskaair.com/\" target=\"_blank\" rel=\"external\">Alaska Air’s website</a>。他们的网站在PC上专注于促使用户订飞机，而移动端，用户可能只想查看航班信息以及航班有没有延误，所以他们在这方面做了改进，满足了用户的需求。</p>\n<p><strong>性能</strong></p>\n<blockquote>\n<p>即使在低网速下，依旧要保持网站的流畅体验</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>虽然这几年无线网络有了很大的提升，但是数据传输依旧是痛点。这就更应该实践<a href=\"http://developer.yahoo.com/performance/rules.html\" target=\"_blank\" rel=\"external\">good performance practices</a>，只发送用户真正想要的内容。</p>\n<p><strong>定位你的受众</strong></p>\n<p>虽然这不是移动端友好定义的一部分，但是明确定位自己的用户，会使这些目标更加具体。例如：当确定要开发移动端站点时，绝对要定位兼容到什么浏览器以及什么设备。</p>\n<p>如果你的用户全是<a href=\"http://searchservervirtualization.techtarget.com/definition/early-adopter\" target=\"_blank\" rel=\"external\">early-adopters</a>，你可以专注于平板和智能手机上的标准浏览器，另一方面，若你的用户使用一些低级的浏览器，你可以减少一些策略作为备选方案。</p>\n<p><strong>移动端开发的方法</strong></p>\n<p>下面一些方法通过不同的途径，实现了上面所设定的目标：</p>\n<ul>\n<li><p><a href=\"https://developer.mozilla.org/en/Web_development/Mobile/Separate_sites\" target=\"_blank\" rel=\"external\">Separate sites</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/en/Web_development/Mobile/Responsive_design\" target=\"_blank\" rel=\"external\">Responsive design</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/en/Web_development/Mobile/A_hybrid_approach\" target=\"_blank\" rel=\"external\">A hybrid approach</a></p>\n</li>\n</ul>\n","source":"_posts/移动端友好.md","raw":"title: 移动端优化\ndate: 2014-07-12 16:34:31\ntags:\n---\n![移动设备](http://img1.picbed.org/uploads/2014/07/5366d0160924ab183425ee3937fae6cd7b890b88.jpg.png)\n\n移动端优化包括好多东西，我们大致可以朝三个方向努力：__展现、内容和性能__，以此来提高网站的用户体验。\n\n__展现__\n\n>使网站在各种尺寸的屏幕下表现良好。\n\n现在用户可以使用各种设备（手机、平板、电子阅读器）访问你的网站。固定宽度、三列布局并带有复杂javascript动画和鼠标移动效果的网站，在小屏幕和低配置的设备上显示，显然不是很好。对网页瘦身、线性化网页布局才更加合理。这也就是为什么第一目标是更好的展现你的网页。\n\n__内容__\n\n>使网站内容适应用户移动设备\n\n想一想如果你的用户使用手机访问你的站点，他们想干什么？一个很好的例子就是[Alaska Air’s website](http://www.alaskaair.com/)。他们的网站在PC上专注于促使用户订飞机，而移动端，用户可能只想查看航班信息以及航班有没有延误，所以他们在这方面做了改进，满足了用户的需求。\n\n__性能__\n\n>即使在低网速下，依旧要保持网站的流畅体验\n\n<!-- more -->\n\n虽然这几年无线网络有了很大的提升，但是数据传输依旧是痛点。这就更应该实践[good performance practices](http://developer.yahoo.com/performance/rules.html)，只发送用户真正想要的内容。\n\n__定位你的受众__\n\n虽然这不是移动端友好定义的一部分，但是明确定位自己的用户，会使这些目标更加具体。例如：当确定要开发移动端站点时，绝对要定位兼容到什么浏览器以及什么设备。\n\n如果你的用户全是[early-adopters](http://searchservervirtualization.techtarget.com/definition/early-adopter)，你可以专注于平板和智能手机上的标准浏览器，另一方面，若你的用户使用一些低级的浏览器，你可以减少一些策略作为备选方案。\n\n__移动端开发的方法__\n\n下面一些方法通过不同的途径，实现了上面所设定的目标：\n\n*\t[Separate sites](https://developer.mozilla.org/en/Web_development/Mobile/Separate_sites)\n\n*\t[Responsive design](https://developer.mozilla.org/en/Web_development/Mobile/Responsive_design)\n\n*\t[A hybrid approach](https://developer.mozilla.org/en/Web_development/Mobile/A_hybrid_approach)\n\n\n\n\n","slug":"移动端友好","updated":1415105931000,"excerpt":"<p><img src=\"http://img1.picbed.org/uploads/2014/07/5366d0160924ab183425ee3937fae6cd7b890b88.jpg.png\" alt=\"移动设备\"></p>\n<p>移动端优化包括好多东西，我们大致可以朝三个方向努力：<strong>展现、内容和性能</strong>，以此来提高网站的用户体验。</p>\n<p><strong>展现</strong></p>\n<blockquote>\n<p>使网站在各种尺寸的屏幕下表现良好。</p>\n</blockquote>\n<p>现在用户可以使用各种设备（手机、平板、电子阅读器）访问你的网站。固定宽度、三列布局并带有复杂javascript动画和鼠标移动效果的网站，在小屏幕和低配置的设备上显示，显然不是很好。对网页瘦身、线性化网页布局才更加合理。这也就是为什么第一目标是更好的展现你的网页。</p>\n<p><strong>内容</strong></p>\n<blockquote>\n<p>使网站内容适应用户移动设备</p>\n</blockquote>\n<p>想一想如果你的用户使用手机访问你的站点，他们想干什么？一个很好的例子就是<a href=\"http://www.alaskaair.com/\" target=\"_blank\" rel=\"external\">Alaska Air’s website</a>。他们的网站在PC上专注于促使用户订飞机，而移动端，用户可能只想查看航班信息以及航班有没有延误，所以他们在这方面做了改进，满足了用户的需求。</p>\n<p><strong>性能</strong></p>\n<blockquote>\n<p>即使在低网速下，依旧要保持网站的流畅体验</p>\n</blockquote>\n","_id":"4bb58p3i9umywkoe","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"移动端网页开发","date":1405145033000,"tags":[],"content":"<p>本文主要从两个方面讲解移动端网页开发：1.针对移动设备设计与优化；2.跨浏览器的兼容性。还有一篇<a href=\"http://zhuxinyong.com/2014/07/12/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%8F%8B%E5%A5%BD/\" target=\"_blank\" rel=\"external\">移动端友好</a>指南。</p>\n<h3 id=\"针对移动设备设计与优化\">针对移动设备设计与优化</h3>\n<p>与台式机和笔记本相比，移动设备有很大不同：1.屏幕尺寸更小；2.有portrait和landscape下自动切换；3.地理位置定位等等。</p>\n<p><strong>多种尺寸屏幕体验</strong></p>\n<p>响应式网页设计使你的网站在不同屏幕下获得很好的用户体验，通常来说体现在屏幕尺寸和屏幕方向。它包含如下技术：</p>\n<ul>\n<li>弹性化网页设计，在不同的尺寸下面顺畅体验。</li>\n<li>使用media query根据不同的屏幕尺寸加载不同的css。</li>\n</ul>\n<p><strong>viewport meta tag</strong>能以最优的方式来显示你的站点到用户设备上。</p>\n<p><strong>使用触摸屏幕</strong></p>\n<p>DOM Touch事件能使你更好的了解触摸屏工作原理，不会使用到css:hover伪类，同时应该设计易点击的按钮，因为手指比鼠标大一些。具体参考<a href=\"http://www.whatcreative.co.uk/blog/tips/designing-for-touch-screen/\" target=\"_blank\" rel=\"external\">designing for touch screens</a>。</p>\n<a id=\"more\"></a>\n\n<p><strong>优化图片</strong></p>\n<p>为了帮助那些使用低网速和高价格的带宽的用户，你可以使用css来判断屏幕宽、高和分辨率，来加载合适的图片尺寸。</p>\n<p>你可以使用gradients和shadows来达到视觉效果，以此来替代图片。</p>\n<p><strong>手机API</strong></p>\n<p>最后，你可是利用移动设备提供的优势，例如orientation和geolocation。</p>\n<h3 id=\"跨浏览器开发\">跨浏览器开发</h3>\n<p><strong>书写跨浏览器代码</strong></p>\n<p>创建的网站会在不同的移动浏览器上浏览：</p>\n<ul>\n<li><p>避免使用特定浏览器的特性，例如带前缀的属性</p>\n</li>\n<li><p>若想使用这些特性，检查一下其他浏览器有没有实现这些特性</p>\n</li>\n<li><p>若其他浏览器没有实现此特性，应该找个替代方法。</p>\n</li>\n</ul>\n<p>例如：如果在一些文字上面使用渐变来实现背景，通过-webkit-linear-gradient，最好也要引入其他浏览器是如何实现渐变背景的。如果你不这样做，最少也得使背景色和字体颜色有反差。最起码此页面还是能在没有实现渐变特性的浏览器上可以浏览的。</p>\n<p>特性列表：<a href=\"https://developer.mozilla.org/en/CSS/CSS_Reference/Mozilla_Extensions\" target=\"_blank\" rel=\"external\">Gecko-specific properties</a>和<a href=\"https://developer.mozilla.org/en/CSS/CSS_Reference/Webkit_Extensions\" target=\"_blank\" rel=\"external\"> WebKit-specific properties</a>，以及<a href=\"http://peter.sh/experiments/vendor-prefixed-css-property-overview/\" target=\"_blank\" rel=\"external\">table of vendor-specific properties</a>。</p>\n<p>使用<a href=\"http://csslint.net/\" target=\"_blank\" rel=\"external\">css lint</a>,可以帮助你发现代码中的问题。</p>\n<p><strong>使用用户代理嗅探</strong></p>\n<p>使用上面介绍的技术来获取具体设备的特点例如屏幕的尺寸和touch screens，并且对应适配这是最好的。但有时这很不实际，网站解析浏览器版本以此来区分台式机、平板、手机，来输出不同的内容。</p>\n<p>如果你这样做，确保你的算法是正确的，同时因为你不可能知道所有浏览器的版本，所以你有可能分发出不适用于那个设备的内容。查看<a href=\"https://developer.mozilla.org/en/Browser_detection_using_the_user_agent#Mobile.2C_Tablet_or_Desktop\" target=\"_blank\" rel=\"external\"> guide to using the user agent string to determine device type</a>。</p>\n<p><strong>在多种浏览器上测试</strong></p>\n<p>在多种设备上测试你的网站，意味要在多平台上测试：至少iOS和Android。</p>\n<ul>\n<li><p>使用<a href=\"https://developer.apple.com/devcenter/ios/index.action\" target=\"_blank\" rel=\"external\">iOS模拟器</a>来测试iPhone上的safari</p>\n</li>\n<li><p>使用<a href=\"https://developer.android.com/sdk/index.html\" target=\"_blank\" rel=\"external\">AndroidSDK</a>来测试Opera和Firefox,看一下额外的指令<a href=\"https://wiki.mozilla.org/Mobile/Fennec/Android/Emulator\" target=\"_blank\" rel=\"external\">running Firefox for Android using the Android emulator</a>。</p>\n</li>\n</ul>\n","source":"_posts/移动端网页开发.md","raw":"title: 移动端网页开发\ndate: 2014-07-12 14:03:53\ntags:\n---\n\n本文主要从两个方面讲解移动端网页开发：1.针对移动设备设计与优化；2.跨浏览器的兼容性。还有一篇[移动端友好](http://zhuxinyong.com/2014/07/12/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%8F%8B%E5%A5%BD/)指南。\n\n###针对移动设备设计与优化###\n\n与台式机和笔记本相比，移动设备有很大不同：1.屏幕尺寸更小；2.有portrait和landscape下自动切换；3.地理位置定位等等。\n\n__多种尺寸屏幕体验__\n\n响应式网页设计使你的网站在不同屏幕下获得很好的用户体验，通常来说体现在屏幕尺寸和屏幕方向。它包含如下技术：\n\n*\t弹性化网页设计，在不同的尺寸下面顺畅体验。\n*\t使用media query根据不同的屏幕尺寸加载不同的css。\n\n__viewport meta tag__能以最优的方式来显示你的站点到用户设备上。\n\n__使用触摸屏幕__\n\nDOM Touch事件能使你更好的了解触摸屏工作原理，不会使用到css:hover伪类，同时应该设计易点击的按钮，因为手指比鼠标大一些。具体参考[designing for touch screens](http://www.whatcreative.co.uk/blog/tips/designing-for-touch-screen/)。\n\n<!-- more -->\n\n__优化图片__\n\n为了帮助那些使用低网速和高价格的带宽的用户，你可以使用css来判断屏幕宽、高和分辨率，来加载合适的图片尺寸。\n\n你可以使用gradients和shadows来达到视觉效果，以此来替代图片。\n\n__手机API__\n\n最后，你可是利用移动设备提供的优势，例如orientation和geolocation。\n\n###跨浏览器开发###\n\n__书写跨浏览器代码__\n\n创建的网站会在不同的移动浏览器上浏览：\n\n*\t避免使用特定浏览器的特性，例如带前缀的属性\n\n*\t若想使用这些特性，检查一下其他浏览器有没有实现这些特性\n\n*\t若其他浏览器没有实现此特性，应该找个替代方法。\n\n例如：如果在一些文字上面使用渐变来实现背景，通过-webkit-linear-gradient，最好也要引入其他浏览器是如何实现渐变背景的。如果你不这样做，最少也得使背景色和字体颜色有反差。最起码此页面还是能在没有实现渐变特性的浏览器上可以浏览的。\n\n特性列表：[Gecko-specific properties](https://developer.mozilla.org/en/CSS/CSS_Reference/Mozilla_Extensions)和[ WebKit-specific properties](https://developer.mozilla.org/en/CSS/CSS_Reference/Webkit_Extensions)，以及[table of vendor-specific properties](http://peter.sh/experiments/vendor-prefixed-css-property-overview/)。\n\n使用[css lint](http://csslint.net/),可以帮助你发现代码中的问题。\n\n__使用用户代理嗅探__\n\n使用上面介绍的技术来获取具体设备的特点例如屏幕的尺寸和touch screens，并且对应适配这是最好的。但有时这很不实际，网站解析浏览器版本以此来区分台式机、平板、手机，来输出不同的内容。\n\n如果你这样做，确保你的算法是正确的，同时因为你不可能知道所有浏览器的版本，所以你有可能分发出不适用于那个设备的内容。查看[ guide to using the user agent string to determine device type](https://developer.mozilla.org/en/Browser_detection_using_the_user_agent#Mobile.2C_Tablet_or_Desktop)。\n\n__在多种浏览器上测试__\n\n在多种设备上测试你的网站，意味要在多平台上测试：至少iOS和Android。\n\n*\t使用[iOS模拟器](https://developer.apple.com/devcenter/ios/index.action)来测试iPhone上的safari\n\n*\t使用[AndroidSDK](https://developer.android.com/sdk/index.html)来测试Opera和Firefox,看一下额外的指令[running Firefox for Android using the Android emulator](https://wiki.mozilla.org/Mobile/Fennec/Android/Emulator)。","slug":"移动端网页开发","updated":1415105931000,"excerpt":"<p>本文主要从两个方面讲解移动端网页开发：1.针对移动设备设计与优化；2.跨浏览器的兼容性。还有一篇<a href=\"http://zhuxinyong.com/2014/07/12/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%8F%8B%E5%A5%BD/\" target=\"_blank\" rel=\"external\">移动端友好</a>指南。</p>\n<h3 id=\"针对移动设备设计与优化\">针对移动设备设计与优化</h3>\n<p>与台式机和笔记本相比，移动设备有很大不同：1.屏幕尺寸更小；2.有portrait和landscape下自动切换；3.地理位置定位等等。</p>\n<p><strong>多种尺寸屏幕体验</strong></p>\n<p>响应式网页设计使你的网站在不同屏幕下获得很好的用户体验，通常来说体现在屏幕尺寸和屏幕方向。它包含如下技术：</p>\n<ul>\n<li>弹性化网页设计，在不同的尺寸下面顺畅体验。</li>\n<li>使用media query根据不同的屏幕尺寸加载不同的css。</li>\n</ul>\n<p><strong>viewport meta tag</strong>能以最优的方式来显示你的站点到用户设备上。</p>\n<p><strong>使用触摸屏幕</strong></p>\n<p>DOM Touch事件能使你更好的了解触摸屏工作原理，不会使用到css:hover伪类，同时应该设计易点击的按钮，因为手指比鼠标大一些。具体参考<a href=\"http://www.whatcreative.co.uk/blog/tips/designing-for-touch-screen/\" target=\"_blank\" rel=\"external\">designing for touch screens</a>。</p>\n","_id":"xgqvyml1brryx4bx","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Express入门","date":1414845706000,"tags":["a9n6uasgm27c4acs"],"content":"<p>此文为翻译，删改了一些东西。</p>\n<p>1.Express安装</p>\n<p>假设你对Node和npm已经有些熟悉，新建一个文件夹：node</p>\n<p>1.1第一种方法：</p>\n<p>首先在node文件夹里，我们新建<strong>package.json</strong>来配置Express应用的一些信息。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">    \"<span class=\"attribute\">name</span>\": <span class=\"value\"><span class=\"string\">\"demo1\"</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">description</span>\": <span class=\"value\"><span class=\"string\">\"First Express app\"</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">version</span>\": <span class=\"value\"><span class=\"string\">\"0.0.1\"</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">dependencies</span>\": <span class=\"value\">{</span></div><div class=\"line\">       \"<span class=\"attribute\">express</span>\": <span class=\"value\"><span class=\"string\">\"^4.10.1\"</span></span>,</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>然后到终端里面输入：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span></span></div></pre></td></tr></table></figure>\n\n<p>然后程序就会自动安装Express。</p>\n<p>1.2第二种方法：</p>\n<p>在终端cd node然后输入：</p>\n<pre><code>npm <span class=\"keyword\">init</span>\n</code></pre><p>然后一路回车，最后输入<strong>yes</strong>，会自动生成<strong>package.json</strong>文件。</p>\n<p>2.创建程序入口文件：app.js</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n\n<p>在我学习一个新框架时，总会把节奏放的很慢，以至于不把问题变得很复杂。</p>\n<p>3.定义程序的路由</p>\n<p>现在让我们来给程序定义一些路由，Express通过API方法可以相应许多HTTP请求，请看下面例子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Regular HTTP get</span></div><div class=\"line\">app.<span class=\"keyword\">get</span>(some url, <span class=\"keyword\">do</span> something);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//Some other page</span></div><div class=\"line\">app.<span class=\"keyword\">get</span>(some other url, <span class=\"keyword\">do</span> something <span class=\"keyword\">else</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//I can respond to a form post</span></div><div class=\"line\">app.post(some url, <span class=\"keyword\">do</span> more stuff);</div></pre></td></tr></table></figure>\n\n<p>接下来我们添加一个真正的首页路由：</p>\n<pre><code>app.<span class=\"keyword\">get</span>(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(request, response)</span> </span>{\n    response.send(<span class=\"string\">\"This would be some HTML\"</span>);\n});    \n</code></pre><p>注意现在我们在response上添加来一个send方法。如果到现在没有任何异常，你可以在终端输入<strong>node app.js</strong>来启动程序，并访问<a href=\"http://127.0.0.1:3000/\" target=\"_blank\" rel=\"external\">http://127.0.0.1:3000/</a></p>\n<p>此时在页面上你应该看到：</p>\n<pre><code>This would <span class=\"keyword\">be</span> some HTML\n</code></pre><p>send方法可以处理不同数据类型的数据，假设你需要为你的站点添加JSON-based API，你可以简单的返回一个对象而不是字符串，Express可以自动把结果转换为JSON同时设置正确的相应头部：</p>\n<pre><code>app.<span class=\"keyword\">get</span>(<span class=\"string\">'/api'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(request, response)</span> </span>{\n    response.send({name:<span class=\"string\">\"Raymond\"</span>,age:<span class=\"number\">40</span>});\n});\n</code></pre><p>3.生成一个blog程序</p>\n<p>我们的第一个程序是一个blog，它看起来没有什么但是应该有的基本知识都包含了。package.json保持原样不做修改，修改app.js如下：</p>\n<pre><code><span class=\"keyword\">var</span> express = require(<span class=\"string\">'express'</span>);\n<span class=\"keyword\">var</span> app = express();\n\napp.<span class=\"keyword\">get</span>(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span> </span>{\n    res.sendfile(<span class=\"string\">'./views/index.html'</span>);\n});\n\napp.<span class=\"keyword\">get</span>(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span> </span>{\n    res.sendfile(<span class=\"string\">'./views/about.html'</span>);\n});\n\napp.<span class=\"keyword\">get</span>(<span class=\"string\">'/article'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span> </span>{\n    res.sendfile(<span class=\"string\">'./views/article.html'</span>);\n});\n\napp.listen(<span class=\"number\">3000</span>);\n</code></pre><p>此时我们把send方法改为sendfile，并且在app.js里面引入了html。同时添加了首页，关于和文章页面。</p>\n<p>接着我们在项目根目录添加views文件夹，并添加index.html,about.html和artical.html。index.html里面添加：</p>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">html</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">title</span>&gt;</span>Home Page<span class=\"tag\">&lt;/<span class=\"title\">title</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Blog!<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"title\">footer</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span> ~ <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"/about\"</span>&gt;</span>About Me<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span> ~ <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"/article\"</span>&gt;</span>Some Article<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">footer</span>&gt;</span>\n\n<span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span>\n</code></pre><p>到目前为止并没有什么特别的，就是一些静态文件。终端里面终止程序，然后再启动程序访问首页应该看到上面写的一些东西。</p>\n<p>4.改为动态应用</p>\n<p>Express支持很多模版引擎（Jade，EJS……），但是我很喜欢Hanlebars所以在接下来的程序中选择了它。在我们的package.json里面添加：</p>\n<pre><code>{\n    \"<span class=\"attribute\">name</span>\": <span class=\"value\"><span class=\"string\">\"blog2\"</span></span>,\n    \"<span class=\"attribute\">description</span>\": <span class=\"value\"><span class=\"string\">\"Blog app\"</span></span>,\n    \"<span class=\"attribute\">version</span>\": <span class=\"value\"><span class=\"string\">\"0.0.1\"</span></span>,\n    \"<span class=\"attribute\">dependencies</span>\": <span class=\"value\">{\n        \"<span class=\"attribute\">express</span>\": <span class=\"value\"><span class=\"string\">\"3.x\"</span></span>,\n        \"<span class=\"attribute\">hbs</span>\":<span class=\"value\"><span class=\"string\">\"*\"</span>\n    </span>}\n</span>}\n</code></pre><p>接下来我们需要在app.js中使用它：</p>\n<pre><code><span class=\"keyword\">var</span> express = require(<span class=\"string\">'express'</span>);\n<span class=\"keyword\">var</span> app = express();\n\n<span class=\"keyword\">var</span> hbs = require(<span class=\"string\">'hbs'</span>);\n\napp.<span class=\"keyword\">set</span>(<span class=\"string\">'view engine'</span>, <span class=\"string\">'html'</span>);\napp.engine(<span class=\"string\">'html'</span>, hbs.__express);\n\napp.<span class=\"keyword\">get</span>(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span> </span>{\n    res.render(<span class=\"string\">'index'</span>);\n});\n\napp.<span class=\"keyword\">get</span>(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span> </span>{\n    res.render(<span class=\"string\">'about'</span>);\n});\n\napp.<span class=\"keyword\">get</span>(<span class=\"string\">'/article'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span> </span>{\n    res.render(<span class=\"string\">'article'</span>);\n});\n\napp.listen(<span class=\"number\">3000</span>);\n</code></pre><p>通过“view engine”告诉Express使用HTML作为动态文件，但这并不是必须的。“app.engine”才是指定何种引擎来渲染页面的。最后我们使用了render方法Express默认去views文件夹去加载页面文件，同时也会忽略文件后缀名，所以<strong>res.render(‘something’)</strong>等同于<strong>views/something.html</strong>，然后根据我们设置的模版引擎来渲染页面。</p>\n<p>4.首页展示文章</p>\n<p>为了保持教程简单这里并没有使用数据库，但是我们会模拟一些数据。在项目根目录创建：blog.js</p>\n<pre><code><span class=\"keyword\">var</span> entries = [\n{<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"title\"</span>:<span class=\"string\">\"Hello World!\"</span>, <span class=\"string\">\"body\"</span>:<span class=\"string\">\"This is the body of my blog entry. Sooo exciting.\"</span>, <span class=\"string\">\"published\"</span>:<span class=\"string\">\"6/2/2013\"</span>},\n{<span class=\"string\">\"id\"</span>:<span class=\"number\">2</span>, <span class=\"string\">\"title\"</span>:<span class=\"string\">\"Eggs for Breakfast\"</span>, <span class=\"string\">\"body\"</span>:<span class=\"string\">\"Today I had eggs for breakfast. Sooo exciting.\"</span>, <span class=\"string\">\"published\"</span>:<span class=\"string\">\"6/3/2013\"</span>},\n{<span class=\"string\">\"id\"</span>:<span class=\"number\">3</span>, <span class=\"string\">\"title\"</span>:<span class=\"string\">\"Beer is Good\"</span>, <span class=\"string\">\"body\"</span>:<span class=\"string\">\"News Flash! Beer is awesome!\"</span>, <span class=\"string\">\"published\"</span>:<span class=\"string\">\"6/4/2013\"</span>},\n{<span class=\"string\">\"id\"</span>:<span class=\"number\">4</span>, <span class=\"string\">\"title\"</span>:<span class=\"string\">\"Mean People Suck\"</span>, <span class=\"string\">\"body\"</span>:<span class=\"string\">\"People who are mean aren't nice or fun to hang around.\"</span>, <span class=\"string\">\"published\"</span>:<span class=\"string\">\"6/5/2013\"</span>},\n{<span class=\"string\">\"id\"</span>:<span class=\"number\">5</span>, <span class=\"string\">\"title\"</span>:<span class=\"string\">\"I'm Leaving Technology X and You Care\"</span>, <span class=\"string\">\"body\"</span>:<span class=\"string\">\"Let me write some link bait about why I'm not using a particular technology anymore.\"</span>, <span class=\"string\">\"published\"</span>:<span class=\"string\">\"6/10/2013\"</span>},\n{<span class=\"string\">\"id\"</span>:<span class=\"number\">6</span>, <span class=\"string\">\"title\"</span>:<span class=\"string\">\"Help My Kickstarter\"</span>, <span class=\"string\">\"body\"</span>:<span class=\"string\">\"I want a new XBox One. Please fund my Kickstarter.\"</span>, <span class=\"string\">\"published\"</span>:<span class=\"string\">\"6/12/2013\"</span>}];\n\n\nexports.getBlogEntries = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{\n    <span class=\"keyword\">return</span> entries;\n}\n\nexports.getBlogEntry = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(id)</span> </span>{\n    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; entries.length; i++) {\n        <span class=\"keyword\">if</span>(entries[i].id == id) <span class=\"keyword\">return</span> entries[i];\n    }\n}\n</code></pre><p>一贯的我们应该有一些：添加／编辑／删除的方法，但是到现在这两个方法足够了。更新app.js如下：</p>\n<pre><code><span class=\"keyword\">var</span> express = require(<span class=\"string\">'express'</span>);\n<span class=\"keyword\">var</span> app = express();\n\n<span class=\"keyword\">var</span> hbs = require(<span class=\"string\">'hbs'</span>);\n\n<span class=\"keyword\">var</span> blogEngine = require(<span class=\"string\">'./blog'</span>);\n\napp.<span class=\"keyword\">set</span>(<span class=\"string\">'view engine'</span>, <span class=\"string\">'html'</span>);\napp.engine(<span class=\"string\">'html'</span>, hbs.__express);\napp.<span class=\"keyword\">use</span>(express.bodyParser());\n\napp.<span class=\"keyword\">get</span>(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span> </span>{\n    res.render(<span class=\"string\">'index'</span>,{title:<span class=\"string\">\"My Blog\"</span>, entries:blogEngine.getBlogEntries()});\n});\n\napp.<span class=\"keyword\">get</span>(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span> </span>{\n    res.render(<span class=\"string\">'about'</span>, {title:<span class=\"string\">\"About Me\"</span>});\n});\n\napp.<span class=\"keyword\">get</span>(<span class=\"string\">'/article/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span> </span>{\n    <span class=\"keyword\">var</span> entry = blogEngine.getBlogEntry(req.params.id);\n    res.render(<span class=\"string\">'article'</span>,{title:entry.title, blog:entry});\n});\n\napp.listen(<span class=\"number\">3000</span>);\n</code></pre><p>注意__以上方法使用于Express3.0，要是Express4.0则要把：</p>\n<pre><code>app.<span class=\"keyword\">use</span>(express.bodyParser());\n</code></pre><p>换为：</p>\n<pre><code><span class=\"keyword\">var</span> bodyParser = <span class=\"keyword\">require</span>(<span class=\"string\">'body-parser'</span>);\napp.<span class=\"keyword\">use</span>(bodyParser.json());\napp.<span class=\"keyword\">use</span>(bodyParser.urlencoded({\n  extended: <span class=\"keyword\">true</span>\n}));\n</code></pre><p>接着我们要修改首页的代码，语法要根据你选择的模版引擎：(可能是hexo也编译大括号,所以我使用＋＋代替了大括号,大家如果复制代码记得改为大括号)</p>\n<pre><code>&lt;<span class=\"comment\">h1</span>&gt;<span class=\"comment\">Blog!</span>&lt;<span class=\"comment\">/h1</span>&gt;\n<span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"comment\">#each</span> <span class=\"comment\">entries</span><span class=\"literal\">+</span><span class=\"literal\">+</span>\n    &lt;<span class=\"comment\">p</span>&gt;\n        &lt;<span class=\"comment\">a</span> <span class=\"comment\">href=\"/article/</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"comment\">id</span><span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"comment\">\"</span>&gt;<span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"comment\">title</span><span class=\"literal\">+</span><span class=\"literal\">+</span>&lt;<span class=\"comment\">/a</span>&gt;&lt;<span class=\"comment\">br/</span>&gt;\n        <span class=\"comment\">Published:</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"comment\">published</span><span class=\"literal\">+</span><span class=\"literal\">+</span>\n    &lt;<span class=\"comment\">/p</span>&gt;\n<span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"comment\">/each</span><span class=\"literal\">+</span><span class=\"literal\">+</span>\n</code></pre><p>即使你对Hanlebars不熟悉，也应该对上面的代码猜的差不多，就是循环文章列表。</p>\n<p>5.添加页面框架</p>\n<p>我敢说你现在应该疑惑其他页面结构去哪里了，当你在Express中使用模版引擎时会自动有框架支持。意味着我可以把我站点通用的东西整合到框架中同时Express会自动的在特定的地方输出我们的内容。在views里面创建layout.html:</p>\n<pre><code><span class=\"tag\">&lt;<span class=\"title\">html</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">title</span>&gt;</span>++title++<span class=\"tag\">&lt;/<span class=\"title\">title</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span>\n    +++body+++\n    <span class=\"tag\">&lt;<span class=\"title\">footer</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span> ~ <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"/about\"</span>&gt;</span>About Me<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n        <span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">footer</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span>\n</code></pre><p>6.显示文章内容</p>\n<p>更新artical.html:</p>\n<pre><code>&lt;<span class=\"comment\">h1</span>&gt;<span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"comment\">blog</span><span class=\"string\">.</span><span class=\"comment\">title</span><span class=\"literal\">+</span><span class=\"literal\">+</span>&lt;<span class=\"comment\">/h1</span>&gt;\n&lt;<span class=\"comment\">p</span>&gt;\n    <span class=\"comment\">Published:</span> <span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"comment\">blog</span><span class=\"string\">.</span><span class=\"comment\">published</span><span class=\"literal\">+</span><span class=\"literal\">+</span>\n&lt;<span class=\"comment\">p/</span>&gt;\n<span class=\"literal\">+</span><span class=\"literal\">+</span><span class=\"comment\">blog</span><span class=\"string\">.</span><span class=\"comment\">body</span><span class=\"literal\">+</span><span class=\"literal\">+</span>\n</code></pre><p>到此我们已经构建完成了我们的应用，重启应用：node app.js。</p>\n<p>如果看不到文章列表或者报错：</p>\n<pre><code><span class=\"keyword\">module</span>.js:<span class=\"number\">340</span>\n    <span class=\"keyword\">throw</span> err;\n          ^\n<span class=\"keyword\">Error</span>: Cannot find <span class=\"keyword\">module</span> <span class=\"comment\">'/Users/zhuxy/work/node/views/app.js'</span>\n    at <span class=\"keyword\">Function</span>.<span class=\"keyword\">Module</span>._resolveFilename (<span class=\"keyword\">module</span>.js:<span class=\"number\">338</span>:<span class=\"number\">15</span>)\n    at <span class=\"keyword\">Function</span>.<span class=\"keyword\">Module</span>._load (<span class=\"keyword\">module</span>.js:<span class=\"number\">280</span>:<span class=\"number\">25</span>)\n    at <span class=\"keyword\">Function</span>.<span class=\"keyword\">Module</span>.runMain (<span class=\"keyword\">module</span>.js:<span class=\"number\">497</span>:<span class=\"number\">10</span>)\n    at startup (node.js:<span class=\"number\">119</span>:<span class=\"number\">16</span>)\n    at node.js:<span class=\"number\">906</span>:<span class=\"number\">3</span>\n</code></pre><p>问题时没有找到<strong>node_path</strong>路径，在终端输入：</p>\n<pre><code><span class=\"attribute\">Linux(Mac)</span>: <span class=\"string\">export NODE_PATH=../node_modules</span>\n<span class=\"attribute\">Windows</span>: <span class=\"string\">set NODE_PATH=.</span>\n</code></pre><p>我的是：</p>\n<pre><code>export <span class=\"constant\">NODE_PATH</span>=<span class=\"regexp\">/usr/local</span><span class=\"regexp\">/lib/node</span>_modules\n</code></pre><p>到此我们的教程就完了！如有问题请回复 － －</p>\n<p>原文：<a href=\"http://code.tutsplus.com/tutorials/introduction-to-express--net-33367\" target=\"_blank\" rel=\"external\">http://code.tutsplus.com/tutorials/introduction-to-express--net-33367</a></p>\n","source":"_posts/Express入门.md","raw":"title: Express入门\ndate: 2014-11-01 20:41:46\ntags: Express\n---\n此文为翻译，删改了一些东西。\n\n1.Express安装\n\n假设你对Node和npm已经有些熟悉，新建一个文件夹：node\n\n1.1第一种方法：\n\n首先在node文件夹里，我们新建__package.json__来配置Express应用的一些信息。\n\n```\n{\n    \"name\": \"demo1\",\n    \"description\": \"First Express app\",\n    \"version\": \"0.0.1\",\n    \"dependencies\": {\n       \"express\": \"^4.10.1\",\n    }\n}\n```\n\n然后到终端里面输入：\n\n```\nnpm install\n```\n\n然后程序就会自动安装Express。\n\n1.2第二种方法：\n\n在终端cd node然后输入：\n\n\tnpm init\n\n然后一路回车，最后输入__yes__，会自动生成__package.json__文件。\n\n2.创建程序入口文件：app.js\n\n```\nvar express = require('express');\nvar app = express();\napp.listen(3000);\n```\n\n在我学习一个新框架时，总会把节奏放的很慢，以至于不把问题变得很复杂。\n\n3.定义程序的路由\n\n现在让我们来给程序定义一些路由，Express通过API方法可以相应许多HTTP请求，请看下面例子：\n\n```\n//Regular HTTP get\napp.get(some url, do something);\n \n//Some other page\napp.get(some other url, do something else);\n \n//I can respond to a form post\napp.post(some url, do more stuff);\n```\n\n接下来我们添加一个真正的首页路由：\n\n\tapp.get('/', function(request, response) {\n\t    response.send(\"This would be some HTML\");\n\t});\t\n\n注意现在我们在response上添加来一个send方法。如果到现在没有任何异常，你可以在终端输入__node app.js__来启动程序，并访问http://127.0.0.1:3000/\n\n此时在页面上你应该看到：\n\n\tThis would be some HTML\n\nsend方法可以处理不同数据类型的数据，假设你需要为你的站点添加JSON-based API，你可以简单的返回一个对象而不是字符串，Express可以自动把结果转换为JSON同时设置正确的相应头部：\n\n\tapp.get('/api', function(request, response) {\n\t    response.send({name:\"Raymond\",age:40});\n\t});\n\n3.生成一个blog程序\n\n我们的第一个程序是一个blog，它看起来没有什么但是应该有的基本知识都包含了。package.json保持原样不做修改，修改app.js如下：\n\n\tvar express = require('express');\n\tvar app = express();\n\t \n\tapp.get('/', function(req, res) {\n\t    res.sendfile('./views/index.html');\n\t});\n\t \n\tapp.get('/about', function(req, res) {\n\t    res.sendfile('./views/about.html');\n\t});\n\t \n\tapp.get('/article', function(req, res) {\n\t    res.sendfile('./views/article.html');\n\t});\n\t \n\tapp.listen(3000);\n\n此时我们把send方法改为sendfile，并且在app.js里面引入了html。同时添加了首页，关于和文章页面。\n\n接着我们在项目根目录添加views文件夹，并添加index.html,about.html和artical.html。index.html里面添加：\n\n\t<html>\n\t<head>\n\t    <title>Home Page</title>\n\t</head>\n\t \n\t<body>\n\t<h1>Blog!</h1>\n\t \n\t<footer>\n\t<p>\n\t    <a href=\"/\">Home</a> ~ <a href=\"/about\">About Me</a> ~ <a href=\"/article\">Some Article</a>\n\t</p>\n\t</footer>\n\t \n\t</body>\n\t</html>\n\n到目前为止并没有什么特别的，就是一些静态文件。终端里面终止程序，然后再启动程序访问首页应该看到上面写的一些东西。\n\n4.改为动态应用\n\nExpress支持很多模版引擎（Jade，EJS......），但是我很喜欢Hanlebars所以在接下来的程序中选择了它。在我们的package.json里面添加：\n\n\t{\n\t    \"name\": \"blog2\",\n\t    \"description\": \"Blog app\",\n\t    \"version\": \"0.0.1\",\n\t    \"dependencies\": {\n\t        \"express\": \"3.x\",\n\t        \"hbs\":\"*\"\n\t    }\n\t}\n\n接下来我们需要在app.js中使用它：\n\n\tvar express = require('express');\n\tvar app = express();\n\t \n\tvar hbs = require('hbs');\n\t \n\tapp.set('view engine', 'html');\n\tapp.engine('html', hbs.__express);\n\t \n\tapp.get('/', function(req, res) {\n\t    res.render('index');\n\t});\n\t \n\tapp.get('/about', function(req, res) {\n\t    res.render('about');\n\t});\n\t \n\tapp.get('/article', function(req, res) {\n\t    res.render('article');\n\t});\n\t \n\tapp.listen(3000);\n\n通过“view engine”告诉Express使用HTML作为动态文件，但这并不是必须的。“app.engine”才是指定何种引擎来渲染页面的。最后我们使用了render方法Express默认去views文件夹去加载页面文件，同时也会忽略文件后缀名，所以__res.render('something')__等同于__views/something.html__，然后根据我们设置的模版引擎来渲染页面。\n\n4.首页展示文章\n\n为了保持教程简单这里并没有使用数据库，但是我们会模拟一些数据。在项目根目录创建：blog.js\n\n\tvar entries = [\n\t{\"id\":1, \"title\":\"Hello World!\", \"body\":\"This is the body of my blog entry. Sooo exciting.\", \"published\":\"6/2/2013\"},\n\t{\"id\":2, \"title\":\"Eggs for Breakfast\", \"body\":\"Today I had eggs for breakfast. Sooo exciting.\", \"published\":\"6/3/2013\"},\n\t{\"id\":3, \"title\":\"Beer is Good\", \"body\":\"News Flash! Beer is awesome!\", \"published\":\"6/4/2013\"},\n\t{\"id\":4, \"title\":\"Mean People Suck\", \"body\":\"People who are mean aren't nice or fun to hang around.\", \"published\":\"6/5/2013\"},\n\t{\"id\":5, \"title\":\"I'm Leaving Technology X and You Care\", \"body\":\"Let me write some link bait about why I'm not using a particular technology anymore.\", \"published\":\"6/10/2013\"},\n\t{\"id\":6, \"title\":\"Help My Kickstarter\", \"body\":\"I want a new XBox One. Please fund my Kickstarter.\", \"published\":\"6/12/2013\"}];\n\t \n\t \n\texports.getBlogEntries = function() {\n\t    return entries;\n\t}\n\t \n\texports.getBlogEntry = function(id) {\n\t    for(var i=0; i < entries.length; i++) {\n\t        if(entries[i].id == id) return entries[i];\n\t    }\n\t}\n\n一贯的我们应该有一些：添加／编辑／删除的方法，但是到现在这两个方法足够了。更新app.js如下：\n\n\tvar express = require('express');\n\tvar app = express();\n\t \n\tvar hbs = require('hbs');\n\t \n\tvar blogEngine = require('./blog');\n\t \n\tapp.set('view engine', 'html');\n\tapp.engine('html', hbs.__express);\n\tapp.use(express.bodyParser());\n\t \n\tapp.get('/', function(req, res) {\n\t    res.render('index',{title:\"My Blog\", entries:blogEngine.getBlogEntries()});\n\t});\n\t \n\tapp.get('/about', function(req, res) {\n\t    res.render('about', {title:\"About Me\"});\n\t});\n\t \n\tapp.get('/article/:id', function(req, res) {\n\t    var entry = blogEngine.getBlogEntry(req.params.id);\n\t    res.render('article',{title:entry.title, blog:entry});\n\t});\n\t \n\tapp.listen(3000);\n\n注意__以上方法使用于Express3.0，要是Express4.0则要把：\n\n\tapp.use(express.bodyParser());\n\n换为：\n\n\tvar bodyParser = require('body-parser');\n\tapp.use(bodyParser.json());\n\tapp.use(bodyParser.urlencoded({\n\t  extended: true\n\t}));\n\n接着我们要修改首页的代码，语法要根据你选择的模版引擎：(可能是hexo也编译大括号,所以我使用＋＋代替了大括号,大家如果复制代码记得改为大括号)\n\n\t<h1>Blog!</h1>\n\t++#each entries++\n\t    <p>\n\t        <a href=\"/article/++id++\">++title++</a><br/>\n\t        Published: ++published++\n\t    </p>\n\t++/each++\n\n即使你对Hanlebars不熟悉，也应该对上面的代码猜的差不多，就是循环文章列表。\n\n5.添加页面框架\n\n我敢说你现在应该疑惑其他页面结构去哪里了，当你在Express中使用模版引擎时会自动有框架支持。意味着我可以把我站点通用的东西整合到框架中同时Express会自动的在特定的地方输出我们的内容。在views里面创建layout.html:\n\n\t<html>\n\t<head>\n\t    <title>++title++</title>\n\t</head>\n\t<body>\n\t    +++body+++\n\t    <footer>\n\t        <p>\n\t            <a href=\"/\">Home</a> ~ <a href=\"/about\">About Me</a>\n\t        </p>\n\t    </footer>\n\t</body>\n\t</html>\n\n6.显示文章内容\n\n更新artical.html:\n\n\t<h1>++blog.title++</h1>\n\t<p>\n\t\tPublished: ++blog.published++\n\t<p/>\n\t++blog.body++\n\n到此我们已经构建完成了我们的应用，重启应用：node app.js。\n\n如果看不到文章列表或者报错：\n\n\tmodule.js:340\n\t    throw err;\n\t          ^\n\tError: Cannot find module '/Users/zhuxy/work/node/views/app.js'\n\t    at Function.Module._resolveFilename (module.js:338:15)\n\t    at Function.Module._load (module.js:280:25)\n\t    at Function.Module.runMain (module.js:497:10)\n\t    at startup (node.js:119:16)\n\t    at node.js:906:3\n\n问题时没有找到__node_path__路径，在终端输入：\n\n\tLinux(Mac): export NODE_PATH=../node_modules\n\tWindows: set NODE_PATH=.\n\n我的是：\n\n\texport NODE_PATH=/usr/local/lib/node_modules\n\n到此我们的教程就完了！如有问题请回复 － －\n\n原文：http://code.tutsplus.com/tutorials/introduction-to-express--net-33367","slug":"Express入门","updated":1415105931000,"excerpt":"","_id":"1c80eet6gejf473w","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Fis 快速入门","date":1403794128000,"tags":[],"content":"<p>最近一直在学习百度的<a href=\"http:http://fis.baidu.com\" target=\"_blank\" rel=\"external\">Fis</a>。</p>\n<h3 id=\"何为Fis?\">何为Fis?</h3>\n<blockquote>\n<p>FIS是专为解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题的工具框架。</p>\n</blockquote>\n<p>现在公司的前端项目主要用到合并、压缩、合并图片（css sprite）、解决缓存问题。</p>\n<h3 id=\"如何使用Fis?\">如何使用Fis?</h3>\n<p>1.安装 Fis</p>\n<p>Fis是基于NodeJs的，所以开始前请自行安装Node。</p>\n<p>安装Fis的命令为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> -g fis</span></div></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>2.资源压缩</p>\n<p>资源压缩对前端来说是相当重要，应该说对整个Web的开发很重要。Fis内部集成压缩功能，不需要额外配置。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fis <span class=\"operator\"><span class=\"keyword\">release</span> <span class=\"comment\">--optimize</span></span></div></pre></td></tr></table></figure>\n\n<p>如果觉得麻烦还有简写：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fis <span class=\"operator\"><span class=\"keyword\">release</span> -o</span></div></pre></td></tr></table></figure>\n\n<p>3.资源合并</p>\n<p>合并需要插件来扩展Fis,安装 <a href=\"https://github.com/hefangshi/fis-postpackager-simple\" target=\"_blank\" rel=\"external\"><strong>fis-postpackager-simple</strong></a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> -g fis-postpackager-simple</span></div></pre></td></tr></table></figure>\n\n<p>安装好后还需要一些简单的配置，一般一个项目下都会有一个fis-conf.js文件，添加：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fis.config.<span class=\"keyword\">set</span>(<span class=\"string\">'modules.postpackager'</span>, <span class=\"string\">'simple'</span>);</div></pre></td></tr></table></figure>\n\n<p>然后就可以合并：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fis <span class=\"operator\"><span class=\"keyword\">release</span> <span class=\"comment\">--pack</span></span></div></pre></td></tr></table></figure>\n\n<p>4.缓存问题</p>\n<p>以前我们解决缓存问题都是这样的：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">dir/css/demo.css?time</span>=<span class=\"string\">20144231213</span></div></pre></td></tr></table></figure>\n\n<p>这种解决方法有弊端？</p>\n<ul>\n<li>不可避免页面错乱</li>\n<li>没有更改的资源版本也被刷新</li>\n</ul>\n<p>而Fis使用的是一种MD5文件名加密的功能达到的：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fis <span class=\"operator\"><span class=\"keyword\">release</span> <span class=\"comment\">--md5</span></span></div></pre></td></tr></table></figure>\n\n<p>还是刚才的那个demo.css文件，处理之后变成：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dir<span class=\"regexp\">/css/</span>demo_291db1d.css</div></pre></td></tr></table></figure>\n\n<p>当然命令也可以连起来写：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">fis</span> <span class=\"comment\">release</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">optimize</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">pack</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">md5</span></div></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fis <span class=\"operator\"><span class=\"keyword\">release</span> -omp</span></div></pre></td></tr></table></figure>\n\n<p>更进一步了解请看<a href=\"http://v.youku.com/v_show/id_XNzI1MjQ2OTI0.html\" target=\"_blank\" rel=\"external\">视频</a>。</p>\n","source":"_posts/Fis-快速入门.md","raw":"title: 'Fis 快速入门'\r\ndate: 2014-06-26 22:48:48\r\ntags:\r\n---\r\n最近一直在学习百度的[Fis](http:http://fis.baidu.com)。\r\n\r\n###何为Fis?###\r\n\r\n>FIS是专为解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题的工具框架。\r\n\r\n现在公司的前端项目主要用到合并、压缩、合并图片（css sprite）、解决缓存问题。\r\n\r\n###如何使用Fis?###\r\n\r\n1.安装 Fis\r\n\r\nFis是基于NodeJs的，所以开始前请自行安装Node。\r\n\r\n安装Fis的命令为：\r\n\r\n```\r\nnpm install -g fis\r\n```\r\n<!-- more -->\r\n\r\n2.资源压缩\r\n\r\n资源压缩对前端来说是相当重要，应该说对整个Web的开发很重要。Fis内部集成压缩功能，不需要额外配置。\r\n\r\n```\r\nfis release --optimize\r\n```\r\n\r\n如果觉得麻烦还有简写：\r\n\r\n```\r\nfis release -o\r\n```\r\n3.资源合并\r\n\r\n合并需要插件来扩展Fis,安装 [__fis-postpackager-simple__](https://github.com/hefangshi/fis-postpackager-simple)\r\n\r\n```\r\nnpm install -g fis-postpackager-simple\r\n```\r\n安装好后还需要一些简单的配置，一般一个项目下都会有一个fis-conf.js文件，添加：\r\n\r\n```\r\nfis.config.set('modules.postpackager', 'simple');\r\n```\r\n\r\n然后就可以合并：\r\n\r\n```\r\nfis release --pack\r\n```\r\n\r\n4.缓存问题\r\n\r\n以前我们解决缓存问题都是这样的：\r\n\r\n```\r\ndir/css/demo.css?time=20144231213\r\n```\r\n\r\n这种解决方法有弊端？\r\n\r\n* 不可避免页面错乱\r\n* 没有更改的资源版本也被刷新\r\n\r\n而Fis使用的是一种MD5文件名加密的功能达到的：\r\n\r\n```\r\nfis release --md5\r\n```\r\n还是刚才的那个demo.css文件，处理之后变成：\r\n\r\n```\r\ndir/css/demo_291db1d.css\r\n```\r\n\r\n当然命令也可以连起来写：\r\n\r\n```\r\nfis release --optimize --pack --md5\r\n```\r\n或者\r\n\r\n```\r\nfis release -omp\r\n```\r\n\r\n更进一步了解请看[视频](http://v.youku.com/v_show/id_XNzI1MjQ2OTI0.html)。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","slug":"Fis-快速入门","updated":1415105931000,"excerpt":"<p>最近一直在学习百度的<a href=\"http:http://fis.baidu.com\" target=\"_blank\" rel=\"external\">Fis</a>。</p>\n<h3 id=\"何为Fis?\">何为Fis?</h3>\n<blockquote>\n<p>FIS是专为解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题的工具框架。</p>\n</blockquote>\n<p>现在公司的前端项目主要用到合并、压缩、合并图片（css sprite）、解决缓存问题。</p>\n<h3 id=\"如何使用Fis?\">如何使用Fis?</h3>\n<p>1.安装 Fis</p>\n<p>Fis是基于NodeJs的，所以开始前请自行安装Node。</p>\n<p>安装Fis的命令为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> -g fis</span></div></pre></td></tr></table></figure>\n\n","_id":"ok4yjsgyigesgjxf","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"Grunt","_id":"n3dgngc096ik4vas","posts":["c98c6ed9nhk24oah"]},{"name":"hexo","_id":"vofllu2j5disl62a","posts":["024x3d9tn7v0o8g5"]},{"name":"Javascript","_id":"3wk5v3misc92hge2","posts":["d9n85bxkhpltnasi","ln1o91378xaeypr3"]},{"name":"工具","_id":"8097jatyq6c2k9t4","posts":["zl19yiti4jem60a4"]},{"name":"webcomponents","_id":"pkbvfuxxgbv7jk6y","posts":["ynh61cwieeb530no"]},{"name":"Node Express","_id":"bwdm06b4z4b33qo0","posts":["hcqiah5v2giixznf"]},{"name":"浏览器","_id":"nggj6hvn31a4t1i3","posts":["whiz42ihx34ofvjm"]},{"name":"Express","_id":"a9n6uasgm27c4acs","posts":["1c80eet6gejf473w"]}]}